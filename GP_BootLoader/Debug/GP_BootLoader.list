
GP_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005180  08005180  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005188  08005188  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000078  08005208  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005208  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd81  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217d  00000000  00000000  0002ce29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002177b  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c539  00000000  00000000  00051a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e6e  00000000  00000000  0005df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  00126e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c74 	.word	0x08004c74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004c74 	.word	0x08004c74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:

			HAL_FLASH_OB_Lock();
}

int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f001 fa05 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f9c5 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fabb 	bl	8000b40 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ca:	f000 fa3d 	bl	8000a48 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 fa53 	bl	8000a78 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 fa7f 	bl	8000ad4 <MX_USART3_UART_Init>
uint8_t SeriaRecieve;
uint32_t current_tick;



	current_tick= HAL_GetTick();
 80005d6:	f001 fa5f 	bl	8001a98 <HAL_GetTick>
 80005da:	60b8      	str	r0, [r7, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	4847      	ldr	r0, [pc, #284]	; (8000700 <main+0x148>)
 80005e2:	f002 f959 	bl	8002898 <HAL_GPIO_WritePin>
	HAL_UART_Receive(C_UART,&SeriaRecieve,1,5000);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ec:	2201      	movs	r2, #1
 80005ee:	4845      	ldr	r0, [pc, #276]	; (8000704 <main+0x14c>)
 80005f0:	f002 ffb5 	bl	800355e <HAL_UART_Receive>

	if (SeriaRecieve == 0)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d127      	bne.n	800064a <main+0x92>
	{
		while(1)
		{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	4840      	ldr	r0, [pc, #256]	; (8000700 <main+0x148>)
 8000600:	f002 f94a 	bl	8002898 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	483d      	ldr	r0, [pc, #244]	; (8000700 <main+0x148>)
 800060a:	f002 f945 	bl	8002898 <HAL_GPIO_WritePin>
	  current_tick = HAL_GetTick();
 800060e:	f001 fa43 	bl	8001a98 <HAL_GetTick>
 8000612:	60b8      	str	r0, [r7, #8]
	  while(HAL_GetTick() <= (current_tick+500));
 8000614:	bf00      	nop
 8000616:	f001 fa3f 	bl	8001a98 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000622:	429a      	cmp	r2, r3
 8000624:	d9f7      	bls.n	8000616 <main+0x5e>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	4835      	ldr	r0, [pc, #212]	; (8000700 <main+0x148>)
 800062c:	f002 f934 	bl	8002898 <HAL_GPIO_WritePin>
	  current_tick = HAL_GetTick();
 8000630:	f001 fa32 	bl	8001a98 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
	  while(HAL_GetTick() <= (current_tick+500));
 8000636:	bf00      	nop
 8000638:	f001 fa2e 	bl	8001a98 <HAL_GetTick>
 800063c:	4602      	mov	r2, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000644:	429a      	cmp	r2, r3
 8000646:	d9f7      	bls.n	8000638 <main+0x80>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000648:	e7d7      	b.n	80005fa <main+0x42>
		}
	}
	else if (SeriaRecieve == 1)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d107      	bne.n	8000660 <main+0xa8>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2120      	movs	r1, #32
 8000654:	482a      	ldr	r0, [pc, #168]	; (8000700 <main+0x148>)
 8000656:	f002 f91f 	bl	8002898 <HAL_GPIO_WritePin>
		bootloader_jump_to_user_app1();
 800065a:	f000 f8cf 	bl	80007fc <bootloader_jump_to_user_app1>
 800065e:	e01f      	b.n	80006a0 <main+0xe8>
	}
	else if (SeriaRecieve == 2)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d107      	bne.n	8000676 <main+0xbe>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <main+0x148>)
 800066c:	f002 f914 	bl	8002898 <HAL_GPIO_WritePin>
		bootloader_jump_to_user_app2();
 8000670:	f000 f8f0 	bl	8000854 <bootloader_jump_to_user_app2>
 8000674:	e014      	b.n	80006a0 <main+0xe8>
	}
	else if (SeriaRecieve == 3)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d107      	bne.n	800068c <main+0xd4>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2120      	movs	r1, #32
 8000680:	481f      	ldr	r0, [pc, #124]	; (8000700 <main+0x148>)
 8000682:	f002 f909 	bl	8002898 <HAL_GPIO_WritePin>
		bootloader_uart_read_data();
 8000686:	f000 f83f 	bl	8000708 <bootloader_uart_read_data>
 800068a:	e009      	b.n	80006a0 <main+0xe8>

	}
	else if (SeriaRecieve == 4)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b04      	cmp	r3, #4
 8000690:	d106      	bne.n	80006a0 <main+0xe8>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <main+0x148>)
 8000698:	f002 f8fe 	bl	8002898 <HAL_GPIO_WritePin>
		bootloader_jump_to_bootloader();
 800069c:	f000 f906 	bl	80008ac <bootloader_jump_to_bootloader>
	}
	/******************************/
	for(uint8_t i=0; i<5; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e022      	b.n	80006ec <main+0x134>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x148>)
 80006ac:	f002 f8f4 	bl	8002898 <HAL_GPIO_WritePin>
	  current_tick = HAL_GetTick();
 80006b0:	f001 f9f2 	bl	8001a98 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
	  while(HAL_GetTick() <= (current_tick+50));
 80006b6:	bf00      	nop
 80006b8:	f001 f9ee 	bl	8001a98 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	3332      	adds	r3, #50	; 0x32
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d9f8      	bls.n	80006b8 <main+0x100>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <main+0x148>)
 80006cc:	f002 f8e4 	bl	8002898 <HAL_GPIO_WritePin>
	  current_tick = HAL_GetTick();
 80006d0:	f001 f9e2 	bl	8001a98 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
	  while(HAL_GetTick() <= (current_tick+50));
 80006d6:	bf00      	nop
 80006d8:	f001 f9de 	bl	8001a98 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	3332      	adds	r3, #50	; 0x32
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d9f8      	bls.n	80006d8 <main+0x120>
	for(uint8_t i=0; i<5; i++)
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	3301      	adds	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d9d9      	bls.n	80006a6 <main+0xee>
		}
	bootloader_jump_to_user_app1();
 80006f2:	f000 f883 	bl	80007fc <bootloader_jump_to_user_app1>
 80006f6:	2300      	movs	r3, #0
		bootloader_jump_to_user_app();

  }
	*/

}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020000 	.word	0x40020000
 8000704:	200000a0 	.word	0x200000a0

08000708 <bootloader_uart_read_data>:


void  bootloader_uart_read_data(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800070e:	2300      	movs	r3, #0
 8000710:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000712:	22c8      	movs	r2, #200	; 0xc8
 8000714:	2100      	movs	r1, #0
 8000716:	4835      	ldr	r0, [pc, #212]	; (80007ec <bootloader_uart_read_data+0xe4>)
 8000718:	f003 fe76 	bl	8004408 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
    HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	2201      	movs	r2, #1
 8000722:	4932      	ldr	r1, [pc, #200]	; (80007ec <bootloader_uart_read_data+0xe4>)
 8000724:	4832      	ldr	r0, [pc, #200]	; (80007f0 <bootloader_uart_read_data+0xe8>)
 8000726:	f002 ff1a 	bl	800355e <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <bootloader_uart_read_data+0xe4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	b29a      	uxth	r2, r3
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	492e      	ldr	r1, [pc, #184]	; (80007f4 <bootloader_uart_read_data+0xec>)
 800073a:	482d      	ldr	r0, [pc, #180]	; (80007f0 <bootloader_uart_read_data+0xe8>)
 800073c:	f002 ff0f 	bl	800355e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <bootloader_uart_read_data+0xe4>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	3b51      	subs	r3, #81	; 0x51
 8000746:	2b0b      	cmp	r3, #11
 8000748:	d84a      	bhi.n	80007e0 <bootloader_uart_read_data+0xd8>
 800074a:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <bootloader_uart_read_data+0x48>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	08000781 	.word	0x08000781
 8000754:	08000789 	.word	0x08000789
 8000758:	08000791 	.word	0x08000791
 800075c:	08000799 	.word	0x08000799
 8000760:	080007a1 	.word	0x080007a1
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007b1 	.word	0x080007b1
 800076c:	080007b9 	.word	0x080007b9
 8000770:	080007c1 	.word	0x080007c1
 8000774:	080007c9 	.word	0x080007c9
 8000778:	080007d1 	.word	0x080007d1
 800077c:	080007d9 	.word	0x080007d9
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <bootloader_uart_read_data+0xe4>)
 8000782:	f000 fa49 	bl	8000c18 <bootloader_handle_getver_cmd>
                break;
 8000786:	e02f      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <bootloader_uart_read_data+0xe4>)
 800078a:	f000 fa8d 	bl	8000ca8 <bootloader_handle_gethelp_cmd>
                break;
 800078e:	e02b      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <bootloader_uart_read_data+0xe4>)
 8000792:	f000 fac5 	bl	8000d20 <bootloader_handle_getcid_cmd>
                break;
 8000796:	e027      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <bootloader_uart_read_data+0xe4>)
 800079a:	f000 fb0d 	bl	8000db8 <bootloader_handle_getrdp_cmd>
                break;
 800079e:	e023      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007a2:	f000 fb55 	bl	8000e50 <bootloader_handle_go_cmd>
                break;
 80007a6:	e01f      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007aa:	f000 fbbb 	bl	8000f24 <bootloader_handle_flash_erase_cmd>
                break;
 80007ae:	e01b      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007b2:	f000 fc21 	bl	8000ff8 <bootloader_handle_mem_write_cmd>
						    //bootloader_jump_to_user_app();
                break;
 80007b6:	e017      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007ba:	f000 fca5 	bl	8001108 <bootloader_handle_en_rw_protect>
                break;
 80007be:	e013      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007c2:	f000 fd3f 	bl	8001244 <bootloader_handle_mem_read>
                break;
 80007c6:	e00f      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007ca:	f000 fd45 	bl	8001258 <bootloader_handle_read_sector_protection_status>
                break;
 80007ce:	e00b      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007d2:	f000 fd89 	bl	80012e8 <bootloader_handle_read_otp>
                break;
 80007d6:	e007      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <bootloader_uart_read_data+0xe4>)
 80007da:	f000 fce7 	bl	80011ac <bootloader_handle_dis_rw_protect>
                break;
 80007de:	e003      	b.n	80007e8 <bootloader_uart_read_data+0xe0>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <bootloader_uart_read_data+0xf0>)
 80007e2:	f000 f88f 	bl	8000904 <printmsg>
                break;
 80007e6:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 80007e8:	e793      	b.n	8000712 <bootloader_uart_read_data+0xa>
 80007ea:	bf00      	nop
 80007ec:	20000130 	.word	0x20000130
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	20000131 	.word	0x20000131
 80007f8:	08004c8c 	.word	0x08004c8c

080007fc <bootloader_jump_to_user_app1>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app1(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 8000802:	480f      	ldr	r0, [pc, #60]	; (8000840 <bootloader_jump_to_user_app1+0x44>)
 8000804:	f000 f87e 	bl	8000904 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <bootloader_jump_to_user_app1+0x48>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <bootloader_jump_to_user_app1+0x4c>)
 8000812:	f000 f877 	bl	8000904 <printmsg>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f383 8808 	msr	MSP, r3
}
 8000820:	bf00      	nop
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <bootloader_jump_to_user_app1+0x50>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <bootloader_jump_to_user_app1+0x54>)
 8000830:	f000 f868 	bl	8000904 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4798      	blx	r3

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	08004cc4 	.word	0x08004cc4
 8000844:	08008000 	.word	0x08008000
 8000848:	08004cf0 	.word	0x08004cf0
 800084c:	08008004 	.word	0x08008004
 8000850:	08004d10 	.word	0x08004d10

08000854 <bootloader_jump_to_user_app2>:
void bootloader_jump_to_user_app2(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <bootloader_jump_to_user_app2+0x44>)
 800085c:	f000 f852 	bl	8000904 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 3
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR3_BASE_ADDRESS;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <bootloader_jump_to_user_app2+0x48>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <bootloader_jump_to_user_app2+0x4c>)
 800086a:	f000 f84b 	bl	8000904 <printmsg>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f383 8808 	msr	MSP, r3
}
 8000878:	bf00      	nop
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR3_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR3_BASE_ADDRESS + 4);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <bootloader_jump_to_user_app2+0x50>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <bootloader_jump_to_user_app2+0x54>)
 8000888:	f000 f83c 	bl	8000904 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4798      	blx	r3

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08004cc4 	.word	0x08004cc4
 800089c:	0800c000 	.word	0x0800c000
 80008a0:	08004cf0 	.word	0x08004cf0
 80008a4:	0800c004 	.word	0x0800c004
 80008a8:	08004d10 	.word	0x08004d10

080008ac <bootloader_jump_to_bootloader>:
void bootloader_jump_to_bootloader(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80008b2:	4810      	ldr	r0, [pc, #64]	; (80008f4 <bootloader_jump_to_bootloader+0x48>)
 80008b4:	f000 f826 	bl	8000904 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 0
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR0_BASE_ADDRESS;
 80008b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <bootloader_jump_to_bootloader+0x4c>)
 80008c4:	f000 f81e 	bl	8000904 <printmsg>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f383 8808 	msr	MSP, r3
}
 80008d2:	bf00      	nop
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR0_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR0_BASE_ADDRESS + 4);
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <bootloader_jump_to_bootloader+0x50>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <bootloader_jump_to_bootloader+0x54>)
 80008e2:	f000 f80f 	bl	8000904 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4798      	blx	r3

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08004cc4 	.word	0x08004cc4
 80008f8:	08004cf0 	.word	0x08004cf0
 80008fc:	08000004 	.word	0x08000004
 8000900:	08004d10 	.word	0x08004d10

08000904 <printmsg>:

/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 8000904:	b40f      	push	{r0, r1, r2, r3}
 8000906:	b580      	push	{r7, lr}
 8000908:	b096      	sub	sp, #88	; 0x58
 800090a:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 800090c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000910:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fd92 	bl	8004444 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc73 	bl	8000210 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	f107 0108 	add.w	r1, r7, #8
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <printmsg+0x48>)
 8000938:	f002 fd7f 	bl	800343a <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 800093c:	bf00      	nop
 800093e:	3758      	adds	r7, #88	; 0x58
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000946:	b004      	add	sp, #16
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	200000ec 	.word	0x200000ec

08000950 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <SystemClock_Config+0xe8>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <SystemClock_Config+0xe8>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <SystemClock_Config+0xe8>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <SystemClock_Config+0xec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <SystemClock_Config+0xec>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <SystemClock_Config+0xec>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800099a:	2310      	movs	r3, #16
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009a6:	2310      	movs	r3, #16
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fa4f 	bl	8002e64 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009cc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <SystemClock_Config+0xf0>)
 80009d2:	f000 f91b 	bl	8000c0c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 ff6a 	bl	80028cc <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <SystemClock_Config+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009fe:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <SystemClock_Config+0xf0>)
 8000a04:	f000 f902 	bl	8000c0c <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000a08:	f002 f846 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <SystemClock_Config+0xf4>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	099b      	lsrs	r3, r3, #6
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f923 	bl	8001c62 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f001 f92d 	bl	8001c7c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2a:	f001 f8fe 	bl	8001c2a <HAL_NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	; 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000
 8000a40:	08004d3c 	.word	0x08004d3c
 8000a44:	10624dd3 	.word	0x10624dd3

08000a48 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_CRC_Init+0x24>)
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <MX_CRC_Init+0x28>)
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_CRC_Init+0x24>)
 8000a54:	f001 f92e 	bl	8001cb4 <HAL_CRC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <MX_CRC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a5e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_CRC_Init+0x2c>)
 8000a64:	f000 f8d2 	bl	8000c0c <_Error_Handler>
  }

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000e4 	.word	0x200000e4
 8000a70:	40023000 	.word	0x40023000
 8000a74:	08004d3c 	.word	0x08004d3c

08000a78 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_USART2_UART_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000ab0:	f002 fc76 	bl	80033a0 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d004      	beq.n	8000ac4 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000aba:	f240 11f7 	movw	r1, #503	; 0x1f7
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000ac0:	f000 f8a4 	bl	8000c0c <_Error_Handler>
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000ec 	.word	0x200000ec
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	08004d3c 	.word	0x08004d3c

08000ad4 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_USART3_UART_Init+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000b0c:	f002 fc48 	bl	80033a0 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d004      	beq.n	8000b20 <MX_USART3_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b16:	f240 210a 	movw	r1, #522	; 0x20a
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_USART3_UART_Init+0x68>)
 8000b1c:	f000 f876 	bl	8000c0c <_Error_Handler>
  }
 __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <MX_USART3_UART_Init+0x60>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0220 	orr.w	r2, r2, #32
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000a0 	.word	0x200000a0
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	08004d3c 	.word	0x08004d3c

08000b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_GPIO_Init+0xc0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4812      	ldr	r0, [pc, #72]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000bbc:	f001 fe6c 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_GPIO_Init+0xc8>)
 8000bd8:	f001 fcca 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_GPIO_Init+0xc4>)
 8000bf4:	f001 fcbc 	bl	8002570 <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000c16:	e7fe      	b.n	8000c16 <_Error_Handler+0xa>

08000c18 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    // 1) verify the checksum
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <bootloader_handle_getver_cmd+0x80>)
 8000c22:	f7ff fe6f 	bl	8000904 <printmsg>

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3b04      	subs	r3, #4
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 fb86 	bl	8001354 <bootloader_verify_crc>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11a      	bne.n	8000c84 <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <bootloader_handle_getver_cmd+0x84>)
 8000c50:	f7ff fe58 	bl	8000904 <printmsg>
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fb4e 	bl	80012fc <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8000c60:	f000 fbc0 	bl	80013e4 <get_bootloader_version>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <bootloader_handle_getver_cmd+0x88>)
 8000c72:	f7ff fe47 	bl	8000904 <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fb9d 	bl	80013bc <bootloader_uart_write_data>
        //checksum is wrong send nack
        bootloader_send_nack();
    }


}
 8000c82:	e004      	b.n	8000c8e <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <bootloader_handle_getver_cmd+0x8c>)
 8000c86:	f7ff fe3d 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000c8a:	f000 fb51 	bl	8001330 <bootloader_send_nack>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08004d50 	.word	0x08004d50
 8000c9c:	08004d7c 	.word	0x08004d7c
 8000ca0:	08004da0 	.word	0x08004da0
 8000ca4:	08004dc0 	.word	0x08004dc0

08000ca8 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000cb0:	4816      	ldr	r0, [pc, #88]	; (8000d0c <bootloader_handle_gethelp_cmd+0x64>)
 8000cb2:	f7ff fe27 	bl	8000904 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <bootloader_handle_gethelp_cmd+0x68>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3b04      	subs	r3, #4
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <bootloader_handle_gethelp_cmd+0x68>)
 8000cc4:	4413      	add	r3, r2
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3b04      	subs	r3, #4
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <bootloader_handle_gethelp_cmd+0x68>)
 8000cd4:	f000 fb3e 	bl	8001354 <bootloader_verify_crc>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10d      	bne.n	8000cfa <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <bootloader_handle_gethelp_cmd+0x6c>)
 8000ce0:	f7ff fe10 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fb06 	bl	80012fc <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <bootloader_handle_gethelp_cmd+0x70>)
 8000cf4:	f000 fb62 	bl	80013bc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000cf8:	e004      	b.n	8000d04 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <bootloader_handle_gethelp_cmd+0x74>)
 8000cfc:	f7ff fe02 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000d00:	f000 fb16 	bl	8001330 <bootloader_send_nack>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08004de0 	.word	0x08004de0
 8000d10:	20000130 	.word	0x20000130
 8000d14:	08004d7c 	.word	0x08004d7c
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	08004dc0 	.word	0x08004dc0

08000d20 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000d2c:	481d      	ldr	r0, [pc, #116]	; (8000da4 <bootloader_handle_getcid_cmd+0x84>)
 8000d2e:	f7ff fde9 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <bootloader_handle_getcid_cmd+0x88>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3b04      	subs	r3, #4
 8000d3e:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <bootloader_handle_getcid_cmd+0x88>)
 8000d40:	4413      	add	r3, r2
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3b04      	subs	r3, #4
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4816      	ldr	r0, [pc, #88]	; (8000da8 <bootloader_handle_getcid_cmd+0x88>)
 8000d50:	f000 fb00 	bl	8001354 <bootloader_verify_crc>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11a      	bne.n	8000d90 <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d5a:	4814      	ldr	r0, [pc, #80]	; (8000dac <bootloader_handle_getcid_cmd+0x8c>)
 8000d5c:	f7ff fdd2 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fac8 	bl	80012fc <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8000d6c:	f000 fb42 	bl	80013f4 <get_mcu_chip_id>
 8000d70:	4603      	mov	r3, r0
 8000d72:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	4619      	mov	r1, r3
 8000d78:	89fb      	ldrh	r3, [r7, #14]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <bootloader_handle_getcid_cmd+0x90>)
 8000d7e:	f7ff fdc1 	bl	8000904 <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000d82:	f107 030e 	add.w	r3, r7, #14
 8000d86:	2102      	movs	r1, #2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fb17 	bl	80013bc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000d8e:	e004      	b.n	8000d9a <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <bootloader_handle_getcid_cmd+0x94>)
 8000d92:	f7ff fdb7 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000d96:	f000 facb 	bl	8001330 <bootloader_send_nack>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	08004e0c 	.word	0x08004e0c
 8000da8:	20000130 	.word	0x20000130
 8000dac:	08004d7c 	.word	0x08004d7c
 8000db0:	08004e38 	.word	0x08004e38
 8000db4:	08004dc0 	.word	0x08004dc0

08000db8 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000dc4:	481d      	ldr	r0, [pc, #116]	; (8000e3c <bootloader_handle_getrdp_cmd+0x84>)
 8000dc6:	f7ff fd9d 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <bootloader_handle_getrdp_cmd+0x88>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3b04      	subs	r3, #4
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <bootloader_handle_getrdp_cmd+0x88>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3b04      	subs	r3, #4
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4816      	ldr	r0, [pc, #88]	; (8000e40 <bootloader_handle_getrdp_cmd+0x88>)
 8000de8:	f000 fab4 	bl	8001354 <bootloader_verify_crc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11a      	bne.n	8000e28 <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <bootloader_handle_getrdp_cmd+0x8c>)
 8000df4:	f7ff fd86 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fa7c 	bl	80012fc <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000e04:	f000 fb08 	bl	8001418 <get_flash_rdp_level>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	461a      	mov	r2, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <bootloader_handle_getrdp_cmd+0x90>)
 8000e16:	f7ff fd75 	bl	8000904 <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 8000e1a:	f107 030f 	add.w	r3, r7, #15
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 facb 	bl	80013bc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000e26:	e004      	b.n	8000e32 <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <bootloader_handle_getrdp_cmd+0x94>)
 8000e2a:	f7ff fd6b 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000e2e:	f000 fa7f 	bl	8001330 <bootloader_send_nack>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08004e5c 	.word	0x08004e5c
 8000e40:	20000130 	.word	0x20000130
 8000e44:	08004d7c 	.word	0x08004d7c
 8000e48:	08004e88 	.word	0x08004e88
 8000e4c:	08004dc0 	.word	0x08004dc0

08000e50 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000e64:	4828      	ldr	r0, [pc, #160]	; (8000f08 <bootloader_handle_go_cmd+0xb8>)
 8000e66:	f7ff fd4d 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <bootloader_handle_go_cmd+0xbc>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	3b04      	subs	r3, #4
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <bootloader_handle_go_cmd+0xbc>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	3b04      	subs	r3, #4
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4821      	ldr	r0, [pc, #132]	; (8000f0c <bootloader_handle_go_cmd+0xbc>)
 8000e88:	f000 fa64 	bl	8001354 <bootloader_verify_crc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d131      	bne.n	8000ef6 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e92:	481f      	ldr	r0, [pc, #124]	; (8000f10 <bootloader_handle_go_cmd+0xc0>)
 8000e94:	f7ff fd36 	bl	8000904 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fa2c 	bl	80012fc <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000eaa:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000eac:	69f9      	ldr	r1, [r7, #28]
 8000eae:	4819      	ldr	r0, [pc, #100]	; (8000f14 <bootloader_handle_go_cmd+0xc4>)
 8000eb0:	f7ff fd28 	bl	8000904 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f000 fac3 	bl	8001440 <verify_address>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d110      	bne.n	8000ee2 <bootloader_handle_go_cmd+0x92>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa78 	bl	80013bc <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <bootloader_handle_go_cmd+0xc8>)
 8000ed8:	f7ff fd14 	bl	8000904 <printmsg>

            lets_jump();
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000ee0:	e00e      	b.n	8000f00 <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <bootloader_handle_go_cmd+0xcc>)
 8000ee4:	f7ff fd0e 	bl	8000904 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000ee8:	f107 030e 	add.w	r3, r7, #14
 8000eec:	2101      	movs	r1, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa64 	bl	80013bc <bootloader_uart_write_data>
}
 8000ef4:	e004      	b.n	8000f00 <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <bootloader_handle_go_cmd+0xd0>)
 8000ef8:	f7ff fd04 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000efc:	f000 fa18 	bl	8001330 <bootloader_send_nack>
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08004ea8 	.word	0x08004ea8
 8000f0c:	20000130 	.word	0x20000130
 8000f10:	08004d7c 	.word	0x08004d7c
 8000f14:	08004ed0 	.word	0x08004ed0
 8000f18:	08004eec 	.word	0x08004eec
 8000f1c:	08004f14 	.word	0x08004f14
 8000f20:	08004dc0 	.word	0x08004dc0

08000f24 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f30:	482a      	ldr	r0, [pc, #168]	; (8000fdc <bootloader_handle_flash_erase_cmd+0xb8>)
 8000f32:	f7ff fce7 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3b04      	subs	r3, #4
 8000f42:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f44:	4413      	add	r3, r2
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3b04      	subs	r3, #4
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f54:	f000 f9fe 	bl	8001354 <bootloader_verify_crc>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d135      	bne.n	8000fca <bootloader_handle_flash_erase_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f5e:	4821      	ldr	r0, [pc, #132]	; (8000fe4 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f60:	f7ff fcd0 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f9c6 	bl	80012fc <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3303      	adds	r3, #3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f82:	f7ff fcbf 	bl	8000904 <printmsg>

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4818      	ldr	r0, [pc, #96]	; (8000fec <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f8c:	f001 fc84 	bl	8002898 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3302      	adds	r3, #2
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3303      	adds	r3, #3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f000 fa8c 	bl	80014bc <execute_flash_erase>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <bootloader_handle_flash_erase_cmd+0xc8>)
 8000fae:	f001 fc73 	bl	8002898 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000fb8:	f7ff fca4 	bl	8000904 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f9fa 	bl	80013bc <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000fc8:	e004      	b.n	8000fd4 <bootloader_handle_flash_erase_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fcc:	f7ff fc9a 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8000fd0:	f000 f9ae 	bl	8001330 <bootloader_send_nack>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08004f38 	.word	0x08004f38
 8000fe0:	20000130 	.word	0x20000130
 8000fe4:	08004d7c 	.word	0x08004d7c
 8000fe8:	08004f68 	.word	0x08004f68
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	08004f9c 	.word	0x08004f9c
 8000ff4:	08004dc0 	.word	0x08004dc0

08000ff8 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8001000:	2300      	movs	r3, #0
 8001002:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8001008:	2300      	movs	r3, #0
 800100a:	77bb      	strb	r3, [r7, #30]
 800100c:	2300      	movs	r3, #0
 800100e:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	799b      	ldrb	r3, [r3, #6]
 800101a:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001022:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 8001024:	7f7b      	ldrb	r3, [r7, #29]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	77bb      	strb	r3, [r7, #30]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 800102e:	482e      	ldr	r0, [pc, #184]	; (80010e8 <bootloader_handle_mem_write_cmd+0xf0>)
 8001030:	f7ff fc68 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <bootloader_handle_mem_write_cmd+0xf4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3b04      	subs	r3, #4
 8001040:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <bootloader_handle_mem_write_cmd+0xf4>)
 8001042:	4413      	add	r3, r2
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3b04      	subs	r3, #4
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4619      	mov	r1, r3
 8001050:	4826      	ldr	r0, [pc, #152]	; (80010ec <bootloader_handle_mem_write_cmd+0xf4>)
 8001052:	f000 f97f 	bl	8001354 <bootloader_verify_crc>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d13b      	bne.n	80010d4 <bootloader_handle_mem_write_cmd+0xdc>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <bootloader_handle_mem_write_cmd+0xf8>)
 800105e:	f7ff fc51 	bl	8000904 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f947 	bl	80012fc <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	4820      	ldr	r0, [pc, #128]	; (80010f4 <bootloader_handle_mem_write_cmd+0xfc>)
 8001072:	f7ff fc47 	bl	8000904 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8001076:	69b8      	ldr	r0, [r7, #24]
 8001078:	f000 f9e2 	bl	8001440 <verify_address>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11c      	bne.n	80010bc <bootloader_handle_mem_write_cmd+0xc4>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8001082:	481d      	ldr	r0, [pc, #116]	; (80010f8 <bootloader_handle_mem_write_cmd+0x100>)
 8001084:	f7ff fc3e 	bl	8000904 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2120      	movs	r1, #32
 800108c:	481b      	ldr	r0, [pc, #108]	; (80010fc <bootloader_handle_mem_write_cmd+0x104>)
 800108e:	f001 fc03 	bl	8002898 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3307      	adds	r3, #7
 8001096:	7f3a      	ldrb	r2, [r7, #28]
 8001098:	69b9      	ldr	r1, [r7, #24]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa55 	bl	800154a <execute_mem_write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <bootloader_handle_mem_write_cmd+0x104>)
 80010aa:	f001 fbf5 	bl	8002898 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f981 	bl	80013bc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80010ba:	e010      	b.n	80010de <bootloader_handle_mem_write_cmd+0xe6>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 80010bc:	4810      	ldr	r0, [pc, #64]	; (8001100 <bootloader_handle_mem_write_cmd+0x108>)
 80010be:	f7ff fc21 	bl	8000904 <printmsg>
            write_status = ADDR_INVALID;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f975 	bl	80013bc <bootloader_uart_write_data>
}
 80010d2:	e004      	b.n	80010de <bootloader_handle_mem_write_cmd+0xe6>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <bootloader_handle_mem_write_cmd+0x10c>)
 80010d6:	f7ff fc15 	bl	8000904 <printmsg>
        bootloader_send_nack();
 80010da:	f000 f929 	bl	8001330 <bootloader_send_nack>
}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08004fc4 	.word	0x08004fc4
 80010ec:	20000130 	.word	0x20000130
 80010f0:	08004d7c 	.word	0x08004d7c
 80010f4:	08004ff4 	.word	0x08004ff4
 80010f8:	0800501c 	.word	0x0800501c
 80010fc:	40020000 	.word	0x40020000
 8001100:	08005044 	.word	0x08005044
 8001104:	08004dc0 	.word	0x08004dc0

08001108 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <bootloader_handle_en_rw_protect+0x90>)
 8001116:	f7ff fbf5 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <bootloader_handle_en_rw_protect+0x94>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3b04      	subs	r3, #4
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <bootloader_handle_en_rw_protect+0x94>)
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3b04      	subs	r3, #4
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4619      	mov	r1, r3
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <bootloader_handle_en_rw_protect+0x94>)
 8001138:	f000 f90c 	bl	8001354 <bootloader_verify_crc>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d120      	bne.n	8001184 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <bootloader_handle_en_rw_protect+0x98>)
 8001144:	f7ff fbde 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8d4 	bl	80012fc <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3302      	adds	r3, #2
 8001158:	7818      	ldrb	r0, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3303      	adds	r3, #3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f000 fa1c 	bl	80015a0 <configure_flash_sector_rw_protection>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <bootloader_handle_en_rw_protect+0x9c>)
 8001172:	f7ff fbc7 	bl	8000904 <printmsg>

        bootloader_uart_write_data(&status,1);
 8001176:	f107 030f 	add.w	r3, r7, #15
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f91d 	bl	80013bc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8001182:	e004      	b.n	800118e <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <bootloader_handle_en_rw_protect+0xa0>)
 8001186:	f7ff fbbd 	bl	8000904 <printmsg>
        bootloader_send_nack();
 800118a:	f000 f8d1 	bl	8001330 <bootloader_send_nack>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08005070 	.word	0x08005070
 800119c:	20000130 	.word	0x20000130
 80011a0:	08004d7c 	.word	0x08004d7c
 80011a4:	08004f9c 	.word	0x08004f9c
 80011a8:	08004dc0 	.word	0x08004dc0

080011ac <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 80011b8:	481d      	ldr	r0, [pc, #116]	; (8001230 <bootloader_handle_dis_rw_protect+0x84>)
 80011ba:	f7ff fba3 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <bootloader_handle_dis_rw_protect+0x88>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3b04      	subs	r3, #4
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <bootloader_handle_dis_rw_protect+0x88>)
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3b04      	subs	r3, #4
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <bootloader_handle_dis_rw_protect+0x88>)
 80011dc:	f000 f8ba 	bl	8001354 <bootloader_verify_crc>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11b      	bne.n	800121e <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <bootloader_handle_dis_rw_protect+0x8c>)
 80011e8:	f7ff fb8c 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f882 	bl	80012fc <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 f9cf 	bl	80015a0 <configure_flash_sector_rw_protection>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <bootloader_handle_dis_rw_protect+0x90>)
 800120c:	f7ff fb7a 	bl	8000904 <printmsg>

        bootloader_uart_write_data(&status,1);
 8001210:	f107 030f 	add.w	r3, r7, #15
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f8d0 	bl	80013bc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 800121c:	e004      	b.n	8001228 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <bootloader_handle_dis_rw_protect+0x94>)
 8001220:	f7ff fb70 	bl	8000904 <printmsg>
        bootloader_send_nack();
 8001224:	f000 f884 	bl	8001330 <bootloader_send_nack>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	080050a4 	.word	0x080050a4
 8001234:	20000130 	.word	0x20000130
 8001238:	08004d7c 	.word	0x08004d7c
 800123c:	08004f9c 	.word	0x08004f9c
 8001240:	08004dc0 	.word	0x08004dc0

08001244 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]


}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8001260:	481c      	ldr	r0, [pc, #112]	; (80012d4 <bootloader_handle_read_sector_protection_status+0x7c>)
 8001262:	f7ff fb4f 	bl	8000904 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <bootloader_handle_read_sector_protection_status+0x80>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3b04      	subs	r3, #4
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <bootloader_handle_read_sector_protection_status+0x80>)
 8001274:	4413      	add	r3, r2
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3b04      	subs	r3, #4
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4619      	mov	r1, r3
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <bootloader_handle_read_sector_protection_status+0x80>)
 8001284:	f000 f866 	bl	8001354 <bootloader_verify_crc>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <bootloader_handle_read_sector_protection_status+0x84>)
 8001290:	f7ff fb38 	bl	8000904 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2102      	movs	r1, #2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f82e 	bl	80012fc <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 80012a0:	f000 fa14 	bl	80016cc <read_OB_rw_protection_status>
 80012a4:	4603      	mov	r3, r0
 80012a6:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <bootloader_handle_read_sector_protection_status+0x88>)
 80012ae:	f7ff fb29 	bl	8000904 <printmsg>
        bootloader_uart_write_data((uint8_t*)&status,2);
 80012b2:	f107 030e 	add.w	r3, r7, #14
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f87f 	bl	80013bc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80012be:	e004      	b.n	80012ca <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <bootloader_handle_read_sector_protection_status+0x8c>)
 80012c2:	f7ff fb1f 	bl	8000904 <printmsg>
        bootloader_send_nack();
 80012c6:	f000 f833 	bl	8001330 <bootloader_send_nack>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	080050d4 	.word	0x080050d4
 80012d8:	20000130 	.word	0x20000130
 80012dc:	08004d7c 	.word	0x08004d7c
 80012e0:	08005114 	.word	0x08005114
 80012e4:	08004dc0 	.word	0x08004dc0

080012e8 <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]


}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 800130c:	23a5      	movs	r3, #165	; 0xa5
 800130e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2202      	movs	r2, #2
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <bootloader_send_ack+0x30>)
 8001320:	f002 f88b 	bl	800343a <HAL_UART_Transmit>

}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000a0 	.word	0x200000a0

08001330 <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8001336:	237f      	movs	r3, #127	; 0x7f
 8001338:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 800133a:	1df9      	adds	r1, r7, #7
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	2201      	movs	r2, #1
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <bootloader_send_nack+0x20>)
 8001344:	f002 f879 	bl	800343a <HAL_UART_Transmit>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000a0 	.word	0x200000a0

08001354 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8001360:	23ff      	movs	r3, #255	; 0xff
 8001362:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e00f      	b.n	800138a <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <bootloader_verify_crc+0x64>)
 800137e:	f000 fcb5 	bl	8001cec <HAL_CRC_Accumulate>
 8001382:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3301      	adds	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3eb      	bcc.n	800136a <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <bootloader_verify_crc+0x64>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <bootloader_verify_crc+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d101      	bne.n	80013ae <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000e4 	.word	0x200000e4

080013bc <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <bootloader_uart_write_data+0x24>)
 80013d2:	f002 f832 	bl	800343a <HAL_UART_Transmit>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000a0 	.word	0x200000a0

080013e4 <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 80013e8:	2310      	movs	r3, #16
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <get_mcu_chip_id+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8001406:	88fb      	ldrh	r3, [r7, #6]

}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e0042000 	.word	0xe0042000

08001418 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 800141e:	2300      	movs	r3, #0
 8001420:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <get_flash_rdp_level+0x24>)
 8001424:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 800142e:	79fb      	ldrb	r3, [r7, #7]

}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	1fffc000 	.word	0x1fffc000

08001440 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800144e:	d305      	bcc.n	800145c <verify_address+0x1c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <verify_address+0x68>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d801      	bhi.n	800145c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8001458:	2300      	movs	r3, #0
 800145a:	e01e      	b.n	800149a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <verify_address+0x68>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d305      	bcc.n	8001470 <verify_address+0x30>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <verify_address+0x6c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d801      	bhi.n	8001470 <verify_address+0x30>
	{
		return ADDR_VALID;
 800146c:	2300      	movs	r3, #0
 800146e:	e014      	b.n	800149a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001476:	d305      	bcc.n	8001484 <verify_address+0x44>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <verify_address+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d801      	bhi.n	8001484 <verify_address+0x44>
	{
		return ADDR_VALID;
 8001480:	2300      	movs	r3, #0
 8001482:	e00a      	b.n	800149a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <verify_address+0x74>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d305      	bcc.n	8001498 <verify_address+0x58>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <verify_address+0x78>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d801      	bhi.n	8001498 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2001c000 	.word	0x2001c000
 80014ac:	20020000 	.word	0x20020000
 80014b0:	0807ffff 	.word	0x0807ffff
 80014b4:	40024000 	.word	0x40024000
 80014b8:	40025000 	.word	0x40025000

080014bc <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d901      	bls.n	80014d6 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 80014d2:	2304      	movs	r3, #4
 80014d4:	e035      	b.n	8001542 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d002      	beq.n	80014e2 <execute_flash_erase+0x26>
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d82e      	bhi.n	8001540 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2bff      	cmp	r3, #255	; 0xff
 80014e6:	d102      	bne.n	80014ee <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	e012      	b.n	8001514 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f1c3 0308 	rsb	r3, r3, #8
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fe:	429a      	cmp	r2, r3
 8001500:	d902      	bls.n	8001508 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8001502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001506:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8001518:	f000 fcfa 	bl	8001f10 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001520:	f107 020c 	add.w	r2, r7, #12
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fe8e 	bl	800224c <HAL_FLASHEx_Erase>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8001536:	f000 fd0d 	bl	8001f54 <HAL_FLASH_Lock>

		return status;
 800153a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800153e:	e000      	b.n	8001542 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8001540:	2304      	movs	r3, #4
}
 8001542:	4618      	mov	r0, r3
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 800155a:	f000 fcd9 	bl	8001f10 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	e011      	b.n	8001588 <execute_mem_write+0x3e>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	18d1      	adds	r1, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	2000      	movs	r0, #0
 800157a:	f000 fc75 	bl	8001e68 <HAL_FLASH_Program>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	3301      	adds	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3e9      	bcc.n	8001564 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8001590:	f000 fce0 	bl	8001f54 <HAL_FLASH_Lock>

    return status;
 8001594:	7dfb      	ldrb	r3, [r7, #23]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	460b      	mov	r3, r1
 80015ac:	71bb      	strb	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <configure_flash_sector_rw_protection+0x124>)
 80015b4:	60fb      	str	r3, [r7, #12]

	  if(disable)
 80015b6:	797b      	ldrb	r3, [r7, #5]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d025      	beq.n	8001608 <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80015bc:	f000 fcda 	bl	8001f74 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80015c0:	bf00      	nop
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80015f2:	bf00      	nop
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8001600:	f000 fcd4 	bl	8001fac <HAL_FLASH_OB_Lock>

			return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e058      	b.n	80016ba <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d126      	bne.n	800165c <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800160e:	f000 fcb1 	bl	8001f74 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001612:	bf00      	nop
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f9      	bne.n	8001614 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	0412      	lsls	r2, r2, #16
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f043 0202 	orr.w	r2, r3, #2
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001648:	bf00      	nop
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f9      	bne.n	800164a <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 8001656:	f000 fca9 	bl	8001fac <HAL_FLASH_OB_Lock>
 800165a:	e02d      	b.n	80016b8 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d12a      	bne.n	80016b8 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001662:	f000 fc87 	bl	8001f74 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001666:	bf00      	nop
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f9      	bne.n	8001668 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	0412      	lsls	r2, r2, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80016a6:	bf00      	nop
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <configure_flash_sector_rw_protection+0x128>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 80016b4:	f000 fc7a 	bl	8001fac <HAL_FLASH_OB_Lock>
    }

		return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c14 	.word	0x40023c14
 80016c8:	40023c00 	.word	0x40023c00

080016cc <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 80016d2:	f000 fc4f 	bl	8001f74 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fe27 	bl	800232c <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 80016de:	f000 fc39 	bl	8001f54 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	b29b      	uxth	r3, r3

}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_MspInit+0x4c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_MspInit+0x4c>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172e:	2007      	movs	r0, #7
 8001730:	f000 fa70 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_CRC_MspInit+0x3c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10d      	bne.n	800176e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_CRC_MspInit+0x40>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_CRC_MspInit+0x40>)
 800175c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_CRC_MspInit+0x40>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023000 	.word	0x40023000
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_UART_MspInit+0xe8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b27      	ldr	r3, [pc, #156]	; (8001870 <HAL_UART_MspInit+0xec>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017de:	230c      	movs	r3, #12
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ee:	2307      	movs	r3, #7
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <HAL_UART_MspInit+0xf0>)
 80017fa:	f000 feb9 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017fe:	e031      	b.n	8001864 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_UART_MspInit+0xf4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12c      	bne.n	8001864 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_UART_MspInit+0xec>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_UART_MspInit+0xec>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_UART_MspInit+0xec>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_UART_MspInit+0xec>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_UART_MspInit+0xec>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001842:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001854:	2307      	movs	r3, #7
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <HAL_UART_MspInit+0xf8>)
 8001860:	f000 fe86 	bl	8002570 <HAL_GPIO_Init>
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	40004800 	.word	0x40004800
 800187c:	40020800 	.word	0x40020800

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f8d0 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART3_IRQHandler+0x10>)
 80018da:	f001 fee3 	bl	80036a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000a0 	.word	0x200000a0

080018e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <_sbrk+0x5c>)
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <_sbrk+0x60>)
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <_sbrk+0x64>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <_sbrk+0x68>)
 8001908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d207      	bcs.n	8001928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001918:	f002 fd4c 	bl	80043b4 <__errno>
 800191c:	4603      	mov	r3, r0
 800191e:	220c      	movs	r2, #12
 8001920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	e009      	b.n	800193c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <_sbrk+0x64>)
 8001938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20020000 	.word	0x20020000
 8001948:	00000400 	.word	0x00000400
 800194c:	20000094 	.word	0x20000094
 8001950:	20000230 	.word	0x20000230

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <SystemInit+0x20>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <SystemInit+0x20>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a2:	f7ff ffd7 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f002 fd0b 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7fe fe05 	bl	80005b8 <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019bc:	08005190 	.word	0x08005190
  ldr r2, =_sbss
 80019c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019c4:	2000022c 	.word	0x2000022c

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_Init+0x40>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x40>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x40>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f90d 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f808 	bl	8001a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff fe76 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x54>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x58>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f917 	bl	8001c62 <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f8ed 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x5c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000010 	.word	0x20000010
 8001a94:	200001f8 	.word	0x200001f8

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200001f8 	.word	0x200001f8

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff47 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff5c 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffb0 	bl	8001bd0 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d106      	bne.n	8001c98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001c96:	e005      	b.n	8001ca4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	795b      	ldrb	r3, [r3, #5]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fd32 	bl	8001740 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e00a      	b.n	8001d1e <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	441a      	add	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3f0      	bcc.n	8001d08 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001d34:	693b      	ldr	r3, [r7, #16]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff fea2 	bl	8001a98 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d008      	beq.n	8001d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e052      	b.n	8001e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0216 	bic.w	r2, r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <HAL_DMA_Abort+0x62>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc4:	e013      	b.n	8001dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc6:	f7ff fe67 	bl	8001a98 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d90c      	bls.n	8001dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e015      	b.n	8001e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e4      	bne.n	8001dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d004      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e00c      	b.n	8001e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2205      	movs	r2, #5
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_FLASH_Program+0xa0>)
 8001e7c:	7e1b      	ldrb	r3, [r3, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_FLASH_Program+0x1e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e03b      	b.n	8001efe <HAL_FLASH_Program+0x96>
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_FLASH_Program+0xa0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e90:	f000 f89c 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001ea4:	783b      	ldrb	r3, [r7, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f000 f947 	bl	800213c <FLASH_Program_Byte>
 8001eae:	e016      	b.n	8001ede <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f000 f91a 	bl	80020f4 <FLASH_Program_HalfWord>
 8001ec0:	e00d      	b.n	8001ede <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d105      	bne.n	8001ed4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68b8      	ldr	r0, [r7, #8]
 8001ece:	f000 f8ef 	bl	80020b0 <FLASH_Program_Word>
 8001ed2:	e004      	b.n	8001ede <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed8:	68b8      	ldr	r0, [r7, #8]
 8001eda:	f000 f8b7 	bl	800204c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ede:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee2:	f000 f873 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_FLASH_Program+0xa4>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_FLASH_Program+0xa4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_FLASH_Program+0xa0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200001fc 	.word	0x200001fc
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_FLASH_Unlock+0x38>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0b      	bge.n	8001f3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_FLASH_Unlock+0x38>)
 8001f24:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_FLASH_Unlock+0x3c>)
 8001f26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_FLASH_Unlock+0x38>)
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_FLASH_Unlock+0x40>)
 8001f2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_FLASH_Unlock+0x38>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da01      	bge.n	8001f3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	45670123 	.word	0x45670123
 8001f50:	cdef89ab 	.word	0xcdef89ab

08001f54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_FLASH_Lock+0x1c>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_FLASH_Lock+0x1c>)
 8001f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f62:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_FLASH_OB_Unlock+0x30>)
 8001f88:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_FLASH_OB_Unlock+0x34>)
 8001f8e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	08192a3b 	.word	0x08192a3b
 8001fa8:	4c5d6e7f 	.word	0x4c5d6e7f

08001fac <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_FLASH_OB_Lock+0x1c>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_FLASH_OB_Lock+0x1c>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <FLASH_WaitForLastOperation+0x78>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7ff fd5b 	bl	8001a98 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001fe4:	e010      	b.n	8002008 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d00c      	beq.n	8002008 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <FLASH_WaitForLastOperation+0x38>
 8001ff4:	f7ff fd50 	bl	8001a98 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e019      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002022:	2201      	movs	r2, #1
 8002024:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002032:	f000 f8a5 	bl	8002180 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
  
}  
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001fc 	.word	0x200001fc
 8002048:	40023c00 	.word	0x40023c00

0800204c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4a13      	ldr	r2, [pc, #76]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a10      	ldr	r2, [pc, #64]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800206a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800206e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002082:	f3bf 8f6f 	isb	sy
}
 8002086:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	000a      	movs	r2, r1
 8002096:	2300      	movs	r3, #0
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	3104      	adds	r1, #4
 800209c:	4613      	mov	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	801a      	strh	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <FLASH_Program_Byte+0x40>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <FLASH_Program_Byte+0x40>)
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <FLASH_Program_Byte+0x40>)
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <FLASH_Program_Byte+0x40>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <FLASH_Program_Byte+0x40>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <FLASH_Program_Byte+0x40>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800219a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 800219e:	2210      	movs	r2, #16
 80021a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021bc:	2220      	movs	r2, #32
 80021be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002212:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f043 0320 	orr.w	r3, r3, #32
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002232:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002236:	2202      	movs	r2, #2
 8002238:	60da      	str	r2, [r3, #12]
  }
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023c00 	.word	0x40023c00
 8002248:	200001fc 	.word	0x200001fc

0800224c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 8002260:	7e1b      	ldrb	r3, [r3, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_FLASHEx_Erase+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e058      	b.n	800231c <HAL_FLASHEx_Erase+0xd0>
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 800226c:	2201      	movs	r2, #1
 800226e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002270:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002274:	f7ff feaa 	bl	8001fcc <FLASH_WaitForLastOperation>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d148      	bne.n	8002314 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d115      	bne.n	80022be <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f000 f868 	bl	8002374 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022a8:	f7ff fe90 	bl	8001fcc <FLASH_WaitForLastOperation>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	6113      	str	r3, [r2, #16]
 80022bc:	e028      	b.n	8002310 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	e01c      	b.n	8002300 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 f874 	bl	80023bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d8:	f7ff fe78 	bl	8001fcc <FLASH_WaitForLastOperation>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022e6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80022ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	601a      	str	r2, [r3, #0]
          break;
 80022f8:	e00a      	b.n	8002310 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4413      	add	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3da      	bcc.n	80022c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002310:	f000 f8e8 	bl	80024e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	761a      	strb	r2, [r3, #24]

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200001fc 	.word	0x200001fc
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	220f      	movs	r2, #15
 8002338:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800233a:	f000 f897 	bl	800246c <FLASH_OB_GetWRP>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002346:	f000 f89d 	bl	8002484 <FLASH_OB_GetRDP>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002352:	f000 f87b 	bl	800244c <FLASH_OB_GetUser>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800235e:	f000 f8b1 	bl	80024c4 <FLASH_OB_GetBOR>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	615a      	str	r2, [r3, #20]
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <FLASH_MassErase+0x44>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <FLASH_MassErase+0x44>)
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <FLASH_MassErase+0x44>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <FLASH_MassErase+0x44>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <FLASH_MassErase+0x44>)
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <FLASH_MassErase+0x44>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6113      	str	r3, [r2, #16]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e010      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d103      	bne.n	80023e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e009      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d103      	bne.n	80023f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e002      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	490f      	ldr	r1, [pc, #60]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002418:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800241c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4313      	orrs	r3, r2
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6113      	str	r3, [r2, #16]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40023c00 	.word	0x40023c00

0800244c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <FLASH_OB_GetUser+0x1c>)
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f023 031f 	bic.w	r3, r3, #31
 800245a:	b2db      	uxtb	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <FLASH_OB_GetWRP+0x14>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40023c16 	.word	0x40023c16

08002484 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800248a:	23aa      	movs	r3, #170	; 0xaa
 800248c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <FLASH_OB_GetRDP+0x3c>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2bcc      	cmp	r3, #204	; 0xcc
 8002496:	d102      	bne.n	800249e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002498:	23cc      	movs	r3, #204	; 0xcc
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	e009      	b.n	80024b2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <FLASH_OB_GetRDP+0x3c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2baa      	cmp	r3, #170	; 0xaa
 80024a6:	d102      	bne.n	80024ae <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80024a8:	23aa      	movs	r3, #170	; 0xaa
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	e001      	b.n	80024b2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80024ae:	2355      	movs	r3, #85	; 0x55
 80024b0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40023c15 	.word	0x40023c15

080024c4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <FLASH_OB_GetBOR+0x1c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	b2db      	uxtb	r3, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023c14 	.word	0x40023c14

080024e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <FLASH_FlushCaches+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <FLASH_FlushCaches+0x88>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <FLASH_FlushCaches+0x88>)
 80024fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <FLASH_FlushCaches+0x88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <FLASH_FlushCaches+0x88>)
 8002506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <FLASH_FlushCaches+0x88>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <FLASH_FlushCaches+0x88>)
 8002512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002516:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <FLASH_FlushCaches+0x88>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <FLASH_FlushCaches+0x88>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <FLASH_FlushCaches+0x88>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <FLASH_FlushCaches+0x88>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <FLASH_FlushCaches+0x88>)
 8002536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <FLASH_FlushCaches+0x88>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <FLASH_FlushCaches+0x88>)
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <FLASH_FlushCaches+0x88>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <FLASH_FlushCaches+0x88>)
 800254e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002552:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <FLASH_FlushCaches+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <FLASH_FlushCaches+0x88>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
  }
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e165      	b.n	8002858 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8154 	bne.w	8002852 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80ae 	beq.w	8002852 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_GPIO_Init+0x300>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a5c      	ldr	r2, [pc, #368]	; (8002870 <HAL_GPIO_Init+0x300>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <HAL_GPIO_Init+0x300>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4f      	ldr	r2, [pc, #316]	; (8002878 <HAL_GPIO_Init+0x308>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x21a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4e      	ldr	r2, [pc, #312]	; (800287c <HAL_GPIO_Init+0x30c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x216>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4d      	ldr	r2, [pc, #308]	; (8002880 <HAL_GPIO_Init+0x310>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x212>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_GPIO_Init+0x314>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4b      	ldr	r2, [pc, #300]	; (8002888 <HAL_GPIO_Init+0x318>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x20a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4a      	ldr	r2, [pc, #296]	; (800288c <HAL_GPIO_Init+0x31c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x206>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a49      	ldr	r2, [pc, #292]	; (8002890 <HAL_GPIO_Init+0x320>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x202>
 800276e:	2306      	movs	r3, #6
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x21c>
 8002772:	2307      	movs	r3, #7
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x21c>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x21c>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x21c>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x21c>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x21c>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x21c>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x304>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_GPIO_Init+0x324>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ce:	4a31      	ldr	r2, [pc, #196]	; (8002894 <HAL_GPIO_Init+0x324>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_GPIO_Init+0x324>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f8:	4a26      	ldr	r2, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x324>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_GPIO_Init+0x324>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_GPIO_Init+0x324>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_GPIO_Init+0x324>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_GPIO_Init+0x324>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae96 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0cc      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d90c      	bls.n	8002908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d044      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d119      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d003      	beq.n	800298a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e067      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4934      	ldr	r1, [pc, #208]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f86c 	bl	8001a98 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f868 	bl	8001a98 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d20c      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f855 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe ffcc 	bl	8001a10 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08005134 	.word	0x08005134
 8002a90:	20000008 	.word	0x20000008
 8002a94:	2000000c 	.word	0x2000000c

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000008 	.word	0x20000008

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08005144 	.word	0x08005144

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffdc 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4903      	ldr	r1, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08005144 	.word	0x08005144

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4bce      	ldr	r3, [pc, #824]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f200 818d 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x344>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002e45 	.word	0x08002e45
 8002b38:	08002e45 	.word	0x08002e45
 8002b3c:	08002e45 	.word	0x08002e45
 8002b40:	08002b6b 	.word	0x08002b6b
 8002b44:	08002e45 	.word	0x08002e45
 8002b48:	08002e45 	.word	0x08002e45
 8002b4c:	08002e45 	.word	0x08002e45
 8002b50:	08002b71 	.word	0x08002b71
 8002b54:	08002e45 	.word	0x08002e45
 8002b58:	08002e45 	.word	0x08002e45
 8002b5c:	08002e45 	.word	0x08002e45
 8002b60:	08002ce5 	.word	0x08002ce5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4bbd      	ldr	r3, [pc, #756]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b66:	61bb      	str	r3, [r7, #24]
       break;
 8002b68:	e16f      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4bbd      	ldr	r3, [pc, #756]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x360>)
 8002b6c:	61bb      	str	r3, [r7, #24]
      break;
 8002b6e:	e16c      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4bb9      	ldr	r3, [pc, #740]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4bb7      	ldr	r3, [pc, #732]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d053      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4bb4      	ldr	r3, [pc, #720]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	ea02 0400 	and.w	r4, r2, r0
 8002b9e:	603c      	str	r4, [r7, #0]
 8002ba0:	400b      	ands	r3, r1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ba8:	4620      	mov	r0, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	014b      	lsls	r3, r1, #5
 8002bb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bba:	0142      	lsls	r2, r0, #5
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	1ac0      	subs	r0, r0, r3
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	eb61 0103 	sbc.w	r1, r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bd8:	0182      	lsls	r2, r0, #6
 8002bda:	1a12      	subs	r2, r2, r0
 8002bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	00d9      	lsls	r1, r3, #3
 8002bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bee:	00d0      	lsls	r0, r2, #3
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	1852      	adds	r2, r2, r1
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb43 0101 	adc.w	r1, r3, r1
 8002bfe:	460b      	mov	r3, r1
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	0259      	lsls	r1, r3, #9
 8002c0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c0e:	0250      	lsls	r0, r2, #9
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f7fd fb4e 	bl	80002c0 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e04c      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	461a      	mov	r2, r3
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	ea02 0a00 	and.w	sl, r2, r0
 8002c46:	ea03 0b01 	and.w	fp, r3, r1
 8002c4a:	4650      	mov	r0, sl
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	014b      	lsls	r3, r1, #5
 8002c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c5c:	0142      	lsls	r2, r0, #5
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	ebb0 000a 	subs.w	r0, r0, sl
 8002c66:	eb61 010b 	sbc.w	r1, r1, fp
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c78:	0182      	lsls	r2, r0, #6
 8002c7a:	1a12      	subs	r2, r2, r0
 8002c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	00d9      	lsls	r1, r3, #3
 8002c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c8e:	00d0      	lsls	r0, r2, #3
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	eb12 020a 	adds.w	r2, r2, sl
 8002c98:	eb43 030b 	adc.w	r3, r3, fp
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	0299      	lsls	r1, r3, #10
 8002ca6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002caa:	0290      	lsls	r0, r2, #10
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f7fd fb00 	bl	80002c0 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc8:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	61bb      	str	r3, [r7, #24]
      break;
 8002ce2:	e0b2      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b5a      	ldr	r3, [pc, #360]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04d      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	461a      	mov	r2, r3
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	ea02 0800 	and.w	r8, r2, r0
 8002d12:	ea03 0901 	and.w	r9, r3, r1
 8002d16:	4640      	mov	r0, r8
 8002d18:	4649      	mov	r1, r9
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	014b      	lsls	r3, r1, #5
 8002d24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d28:	0142      	lsls	r2, r0, #5
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d32:	eb61 0109 	sbc.w	r1, r1, r9
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	018b      	lsls	r3, r1, #6
 8002d40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d44:	0182      	lsls	r2, r0, #6
 8002d46:	1a12      	subs	r2, r2, r0
 8002d48:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	00d9      	lsls	r1, r3, #3
 8002d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5a:	00d0      	lsls	r0, r2, #3
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	eb12 0208 	adds.w	r2, r2, r8
 8002d64:	eb43 0309 	adc.w	r3, r3, r9
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0259      	lsls	r1, r3, #9
 8002d72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d76:	0250      	lsls	r0, r2, #9
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	f7fd fa9a 	bl	80002c0 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	e04a      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	ea02 0400 	and.w	r4, r2, r0
 8002dae:	ea03 0501 	and.w	r5, r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	014b      	lsls	r3, r1, #5
 8002dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dc4:	0142      	lsls	r2, r0, #5
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	1b00      	subs	r0, r0, r4
 8002dcc:	eb61 0105 	sbc.w	r1, r1, r5
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	018b      	lsls	r3, r1, #6
 8002dda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dde:	0182      	lsls	r2, r0, #6
 8002de0:	1a12      	subs	r2, r2, r0
 8002de2:	eb63 0301 	sbc.w	r3, r3, r1
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	00d9      	lsls	r1, r3, #3
 8002df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002df4:	00d0      	lsls	r0, r2, #3
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	1912      	adds	r2, r2, r4
 8002dfc:	eb45 0303 	adc.w	r3, r5, r3
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0299      	lsls	r1, r3, #10
 8002e0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e0e:	0290      	lsls	r0, r2, #10
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	f7fd fa4e 	bl	80002c0 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0f1b      	lsrs	r3, r3, #28
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	61bb      	str	r3, [r7, #24]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e46:	61bb      	str	r3, [r7, #24]
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e28d      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8083 	beq.w	8002f8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e84:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d019      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x124>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e25a      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x90>
 8002ee6:	4b7c      	ldr	r3, [pc, #496]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7b      	ldr	r2, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xcc>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0xb4>
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xcc>
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6e      	ldr	r2, [pc, #440]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6b      	ldr	r2, [pc, #428]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fdae 	bl	8001a98 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fdaa 	bl	8001a98 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e21f      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xdc>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fd9a 	bl	8001a98 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fd96 	bl	8001a98 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e20b      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x104>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d06f      	beq.n	8003076 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f96:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x186>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1d3      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e03a      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_OscConfig+0x278>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fd43 	bl	8001a98 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fd3f 	bl	8001a98 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1b4      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4925      	ldr	r1, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x278>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fd22 	bl	8001a98 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fd1e 	bl	8001a98 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e193      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x27c>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fd02 	bl	8001a98 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fcfe 	bl	8001a98 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e173      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x234>
 80030b6:	e01b      	b.n	80030f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fe fceb 	bl	8001a98 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fce7 	bl	8001a98 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e15c      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470000 	.word	0x42470000
 80030e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b8a      	ldr	r3, [pc, #552]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ea      	bne.n	80030c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8097 	beq.w	800322c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b7f      	ldr	r3, [pc, #508]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a7e      	ldr	r2, [pc, #504]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b79      	ldr	r3, [pc, #484]	; (8003314 <HAL_RCC_OscConfig+0x4b0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x4b0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x4b0>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fca7 	bl	8001a98 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fca3 	bl	8001a98 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e118      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x4b0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x31e>
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a65      	ldr	r2, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	e01c      	b.n	80031bc <HAL_RCC_OscConfig+0x358>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x340>
 800318a:	4b61      	ldr	r3, [pc, #388]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a60      	ldr	r2, [pc, #384]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x358>
 80031a4:	4b5a      	ldr	r3, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a59      	ldr	r2, [pc, #356]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	4b57      	ldr	r3, [pc, #348]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	f023 0304 	bic.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fc68 	bl	8001a98 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe fc64 	bl	8001a98 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0d7      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <HAL_RCC_OscConfig+0x368>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fc52 	bl	8001a98 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fc4e 	bl	8001a98 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0c1      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80ad 	beq.w	8003390 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d060      	beq.n	8003304 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d145      	bne.n	80032d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x4b4>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fc22 	bl	8001a98 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fc1e 	bl	8001a98 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e093      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	491b      	ldr	r1, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x4b4>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fbf3 	bl	8001a98 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe fbef 	bl	8001a98 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e064      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x452>
 80032d4:	e05c      	b.n	8003390 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x4b4>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fbdc 	bl	8001a98 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fbd8 	bl	8001a98 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e04d      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x480>
 8003302:	e045      	b.n	8003390 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e040      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
 8003318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_RCC_OscConfig+0x538>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d030      	beq.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d129      	bne.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d122      	bne.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800334c:	4013      	ands	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	4293      	cmp	r3, r2
 8003356:	d119      	bne.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	3b01      	subs	r3, #1
 8003366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d10f      	bne.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e03f      	b.n	8003432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe f9dc 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fe1d 	bl	8004024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af02      	add	r7, sp, #8
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d17c      	bne.n	8003554 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Transmit+0x2c>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e075      	b.n	8003556 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_UART_Transmit+0x3e>
 8003474:	2302      	movs	r3, #2
 8003476:	e06e      	b.n	8003556 <HAL_UART_Transmit+0x11c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2221      	movs	r2, #33	; 0x21
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348e:	f7fe fb03 	bl	8001a98 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d108      	bne.n	80034bc <HAL_UART_Transmit+0x82>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034cc:	e02a      	b.n	8003524 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb9b 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e036      	b.n	8003556 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3302      	adds	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e007      	b.n	8003516 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	3301      	adds	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1cf      	bne.n	80034ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fb6b 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e006      	b.n	8003556 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b08a      	sub	sp, #40	; 0x28
 8003562:	af02      	add	r7, sp, #8
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 808c 	bne.w	8003698 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Receive+0x2e>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e084      	b.n	800369a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_UART_Receive+0x40>
 800359a:	2302      	movs	r3, #2
 800359c:	e07d      	b.n	800369a <HAL_UART_Receive+0x13c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2222      	movs	r2, #34	; 0x22
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ba:	f7fe fa6d 	bl	8001a98 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d108      	bne.n	80035e8 <HAL_UART_Receive+0x8a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e003      	b.n	80035f0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035f8:	e043      	b.n	8003682 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	2120      	movs	r1, #32
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb05 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e042      	b.n	800369a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	b29a      	uxth	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3302      	adds	r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e01f      	b.n	8003674 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d007      	beq.n	800364e <HAL_UART_Receive+0xf0>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_UART_Receive+0xfe>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e008      	b.n	800366e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003668:	b2da      	uxtb	r2, r3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1b6      	bne.n	80035fa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0ba      	sub	sp, #232	; 0xe8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_UART_IRQHandler+0x66>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fbd3 	bl	8003eae <UART_Receive_IT>
      return;
 8003708:	e256      	b.n	8003bb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800370a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80de 	beq.w	80038d0 <HAL_UART_IRQHandler+0x22c>
 8003714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80d1 	beq.w	80038d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_UART_IRQHandler+0xae>
 800373a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_UART_IRQHandler+0xd2>
 800375e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0xf6>
 8003782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f043 0204 	orr.w	r2, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_UART_IRQHandler+0x126>
 80037a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0208 	orr.w	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 81ed 	beq.w	8003bae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_UART_IRQHandler+0x14e>
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fb5e 	bl	8003eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_UART_IRQHandler+0x17a>
 8003816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04f      	beq.n	80038be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa66 	bl	8003cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d141      	bne.n	80038b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800384c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800385e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800386a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1d9      	bne.n	8003832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d013      	beq.n	80038ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	4a7d      	ldr	r2, [pc, #500]	; (8003a80 <HAL_UART_IRQHandler+0x3dc>)
 800388c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fac5 	bl	8001e22 <HAL_DMA_Abort_IT>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038a8:	4610      	mov	r0, r2
 80038aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e00e      	b.n	80038cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f99a 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	e00a      	b.n	80038cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f996 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	e006      	b.n	80038cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f992 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038ca:	e170      	b.n	8003bae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	bf00      	nop
    return;
 80038ce:	e16e      	b.n	8003bae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 814a 	bne.w	8003b6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8143 	beq.w	8003b6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 813c 	beq.w	8003b6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	f040 80b4 	bne.w	8003a84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8140 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800393a:	429a      	cmp	r2, r3
 800393c:	f080 8139 	bcs.w	8003bb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	f000 8088 	beq.w	8003a66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800396c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800398e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800399a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1d9      	bne.n	8003956 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e1      	bne.n	80039a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e3      	bne.n	80039de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a48:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e3      	bne.n	8003a24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe f96e 	bl	8001d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8c0 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a7c:	e099      	b.n	8003bb2 <HAL_UART_IRQHandler+0x50e>
 8003a7e:	bf00      	nop
 8003a80:	08003db7 	.word	0x08003db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 808b 	beq.w	8003bb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ace:	647a      	str	r2, [r7, #68]	; 0x44
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e3      	bne.n	8003aaa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	623b      	str	r3, [r7, #32]
   return(result);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b06:	633a      	str	r2, [r7, #48]	; 0x30
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e3      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b4c:	61fa      	str	r2, [r7, #28]
 8003b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	617b      	str	r3, [r7, #20]
   return(result);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e3      	bne.n	8003b28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f848 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b6c:	e023      	b.n	8003bb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_UART_IRQHandler+0x4ea>
 8003b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f929 	bl	8003dde <UART_Transmit_IT>
    return;
 8003b8c:	e014      	b.n	8003bb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00e      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x514>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f969 	bl	8003e7e <UART_EndTransmit_IT>
    return;
 8003bac:	e004      	b.n	8003bb8 <HAL_UART_IRQHandler+0x514>
    return;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003bb6:	bf00      	nop
  }
}
 8003bb8:	37e8      	adds	r7, #232	; 0xe8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop

08003bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b090      	sub	sp, #64	; 0x40
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c24:	e050      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d04c      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c34:	f7fd ff30 	bl	8001a98 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d241      	bcs.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c64:	637a      	str	r2, [r7, #52]	; 0x34
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	613b      	str	r3, [r7, #16]
   return(result);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c98:	623a      	str	r2, [r7, #32]
 8003c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69f9      	ldr	r1, [r7, #28]
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e00f      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d09f      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3740      	adds	r7, #64	; 0x40
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b095      	sub	sp, #84	; 0x54
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d18:	643a      	str	r2, [r7, #64]	; 0x40
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d119      	bne.n	8003d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d88:	61ba      	str	r2, [r7, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003daa:	bf00      	nop
 8003dac:	3754      	adds	r7, #84	; 0x54
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff ff09 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d13e      	bne.n	8003e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d114      	bne.n	8003e26 <UART_Transmit_IT+0x48>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	e008      	b.n	8003e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6211      	str	r1, [r2, #32]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4619      	mov	r1, r3
 8003e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fe8e 	bl	8003bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08c      	sub	sp, #48	; 0x30
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	; 0x22
 8003ec0:	f040 80ab 	bne.w	800401a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d117      	bne.n	8003efe <UART_Receive_IT+0x50>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
 8003efc:	e026      	b.n	8003f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f10:	d007      	beq.n	8003f22 <UART_Receive_IT+0x74>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <UART_Receive_IT+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e008      	b.n	8003f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d15a      	bne.n	8004016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0220 	bic.w	r2, r2, #32
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d135      	bne.n	800400c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	623a      	str	r2, [r7, #32]
 8003fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	69f9      	ldr	r1, [r7, #28]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d10a      	bne.n	8003ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fdf9 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
 800400a:	e002      	b.n	8004012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fde1 	bl	8003bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e002      	b.n	800401c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3730      	adds	r7, #48	; 0x30
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	b09f      	sub	sp, #124	; 0x7c
 800402a:	af00      	add	r7, sp, #0
 800402c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	ea40 0301 	orr.w	r3, r0, r1
 8004044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	431a      	orrs	r2, r3
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004068:	f021 010c 	bic.w	r1, r1, #12
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	6999      	ldr	r1, [r3, #24]
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	ea40 0301 	orr.w	r3, r0, r1
 800408c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4bc5      	ldr	r3, [pc, #788]	; (80043a8 <UART_SetConfig+0x384>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d004      	beq.n	80040a2 <UART_SetConfig+0x7e>
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4bc3      	ldr	r3, [pc, #780]	; (80043ac <UART_SetConfig+0x388>)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d103      	bne.n	80040aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a2:	f7fe fd19 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 80040a6:	6778      	str	r0, [r7, #116]	; 0x74
 80040a8:	e002      	b.n	80040b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040aa:	f7fe fd01 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 80040ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	f040 80b6 	bne.w	8004228 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040be:	461c      	mov	r4, r3
 80040c0:	f04f 0500 	mov.w	r5, #0
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	6439      	str	r1, [r7, #64]	; 0x40
 80040cc:	415b      	adcs	r3, r3
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
 80040d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040d4:	1912      	adds	r2, r2, r4
 80040d6:	eb45 0303 	adc.w	r3, r5, r3
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e8:	00d0      	lsls	r0, r2, #3
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	1911      	adds	r1, r2, r4
 80040f0:	6639      	str	r1, [r7, #96]	; 0x60
 80040f2:	416b      	adcs	r3, r5
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	1891      	adds	r1, r2, r2
 8004102:	63b9      	str	r1, [r7, #56]	; 0x38
 8004104:	415b      	adcs	r3, r3
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800410c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004110:	f7fc f8d6 	bl	80002c0 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4ba5      	ldr	r3, [pc, #660]	; (80043b0 <UART_SetConfig+0x38c>)
 800411a:	fba3 2302 	umull	r2, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	011e      	lsls	r6, r3, #4
 8004122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004124:	461c      	mov	r4, r3
 8004126:	f04f 0500 	mov.w	r5, #0
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	1891      	adds	r1, r2, r2
 8004130:	6339      	str	r1, [r7, #48]	; 0x30
 8004132:	415b      	adcs	r3, r3
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
 8004136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800413a:	1912      	adds	r2, r2, r4
 800413c:	eb45 0303 	adc.w	r3, r5, r3
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	00d9      	lsls	r1, r3, #3
 800414a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800414e:	00d0      	lsls	r0, r2, #3
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	1911      	adds	r1, r2, r4
 8004156:	65b9      	str	r1, [r7, #88]	; 0x58
 8004158:	416b      	adcs	r3, r5
 800415a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	461a      	mov	r2, r3
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	1891      	adds	r1, r2, r2
 8004168:	62b9      	str	r1, [r7, #40]	; 0x28
 800416a:	415b      	adcs	r3, r3
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004172:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004176:	f7fc f8a3 	bl	80002c0 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b8c      	ldr	r3, [pc, #560]	; (80043b0 <UART_SetConfig+0x38c>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a87      	ldr	r2, [pc, #540]	; (80043b0 <UART_SetConfig+0x38c>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a0:	441e      	add	r6, r3
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	4618      	mov	r0, r3
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	1894      	adds	r4, r2, r2
 80041b0:	623c      	str	r4, [r7, #32]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ba:	1812      	adds	r2, r2, r0
 80041bc:	eb41 0303 	adc.w	r3, r1, r3
 80041c0:	f04f 0400 	mov.w	r4, #0
 80041c4:	f04f 0500 	mov.w	r5, #0
 80041c8:	00dd      	lsls	r5, r3, #3
 80041ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ce:	00d4      	lsls	r4, r2, #3
 80041d0:	4622      	mov	r2, r4
 80041d2:	462b      	mov	r3, r5
 80041d4:	1814      	adds	r4, r2, r0
 80041d6:	653c      	str	r4, [r7, #80]	; 0x50
 80041d8:	414b      	adcs	r3, r1
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	1891      	adds	r1, r2, r2
 80041e8:	61b9      	str	r1, [r7, #24]
 80041ea:	415b      	adcs	r3, r3
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041f6:	f7fc f863 	bl	80002c0 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <UART_SetConfig+0x38c>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	4a67      	ldr	r2, [pc, #412]	; (80043b0 <UART_SetConfig+0x38c>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 0207 	and.w	r2, r3, #7
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4432      	add	r2, r6
 8004224:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004226:	e0b9      	b.n	800439c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422a:	461c      	mov	r4, r3
 800422c:	f04f 0500 	mov.w	r5, #0
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1891      	adds	r1, r2, r2
 8004236:	6139      	str	r1, [r7, #16]
 8004238:	415b      	adcs	r3, r3
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004240:	1912      	adds	r2, r2, r4
 8004242:	eb45 0303 	adc.w	r3, r5, r3
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	00d9      	lsls	r1, r3, #3
 8004250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004254:	00d0      	lsls	r0, r2, #3
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	eb12 0804 	adds.w	r8, r2, r4
 800425e:	eb43 0905 	adc.w	r9, r3, r5
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4618      	mov	r0, r3
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	008b      	lsls	r3, r1, #2
 8004276:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800427a:	0082      	lsls	r2, r0, #2
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc f81e 	bl	80002c0 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4b49      	ldr	r3, [pc, #292]	; (80043b0 <UART_SetConfig+0x38c>)
 800428a:	fba3 2302 	umull	r2, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	011e      	lsls	r6, r3, #4
 8004292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004294:	4618      	mov	r0, r3
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	1894      	adds	r4, r2, r2
 80042a0:	60bc      	str	r4, [r7, #8]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042aa:	1812      	adds	r2, r2, r0
 80042ac:	eb41 0303 	adc.w	r3, r1, r3
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	f04f 0500 	mov.w	r5, #0
 80042b8:	00dd      	lsls	r5, r3, #3
 80042ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042be:	00d4      	lsls	r4, r2, #3
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	1814      	adds	r4, r2, r0
 80042c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80042c8:	414b      	adcs	r3, r1
 80042ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	008b      	lsls	r3, r1, #2
 80042e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042e4:	0082      	lsls	r2, r0, #2
 80042e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042ea:	f7fb ffe9 	bl	80002c0 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <UART_SetConfig+0x38c>)
 80042f4:	fba3 1302 	umull	r1, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	2164      	movs	r1, #100	; 0x64
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	3332      	adds	r3, #50	; 0x32
 8004306:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <UART_SetConfig+0x38c>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004312:	441e      	add	r6, r3
 8004314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004316:	4618      	mov	r0, r3
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	1894      	adds	r4, r2, r2
 8004322:	603c      	str	r4, [r7, #0]
 8004324:	415b      	adcs	r3, r3
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	1812      	adds	r2, r2, r0
 800432e:	eb41 0303 	adc.w	r3, r1, r3
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	f04f 0500 	mov.w	r5, #0
 800433a:	00dd      	lsls	r5, r3, #3
 800433c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004340:	00d4      	lsls	r4, r2, #3
 8004342:	4622      	mov	r2, r4
 8004344:	462b      	mov	r3, r5
 8004346:	eb12 0a00 	adds.w	sl, r2, r0
 800434a:	eb43 0b01 	adc.w	fp, r3, r1
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004366:	0082      	lsls	r2, r0, #2
 8004368:	4650      	mov	r0, sl
 800436a:	4659      	mov	r1, fp
 800436c:	f7fb ffa8 	bl	80002c0 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <UART_SetConfig+0x38c>)
 8004376:	fba3 1302 	umull	r1, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2164      	movs	r1, #100	; 0x64
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <UART_SetConfig+0x38c>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4432      	add	r2, r6
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	377c      	adds	r7, #124	; 0x7c
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000014 	.word	0x20000014

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	4d0d      	ldr	r5, [pc, #52]	; (80043f8 <__libc_init_array+0x38>)
 80043c4:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	2600      	movs	r6, #0
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	4d0b      	ldr	r5, [pc, #44]	; (8004400 <__libc_init_array+0x40>)
 80043d2:	4c0c      	ldr	r4, [pc, #48]	; (8004404 <__libc_init_array+0x44>)
 80043d4:	f000 fc4e 	bl	8004c74 <_init>
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	2600      	movs	r6, #0
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08005188 	.word	0x08005188
 80043fc:	08005188 	.word	0x08005188
 8004400:	08005188 	.word	0x08005188
 8004404:	0800518c 	.word	0x0800518c

08004408 <memset>:
 8004408:	4402      	add	r2, r0
 800440a:	4603      	mov	r3, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <_vsiprintf_r>:
 8004418:	b500      	push	{lr}
 800441a:	b09b      	sub	sp, #108	; 0x6c
 800441c:	9100      	str	r1, [sp, #0]
 800441e:	9104      	str	r1, [sp, #16]
 8004420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	9102      	str	r1, [sp, #8]
 8004428:	4905      	ldr	r1, [pc, #20]	; (8004440 <_vsiprintf_r+0x28>)
 800442a:	9103      	str	r1, [sp, #12]
 800442c:	4669      	mov	r1, sp
 800442e:	f000 f86f 	bl	8004510 <_svfiprintf_r>
 8004432:	9b00      	ldr	r3, [sp, #0]
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	b01b      	add	sp, #108	; 0x6c
 800443a:	f85d fb04 	ldr.w	pc, [sp], #4
 800443e:	bf00      	nop
 8004440:	ffff0208 	.word	0xffff0208

08004444 <vsiprintf>:
 8004444:	4613      	mov	r3, r2
 8004446:	460a      	mov	r2, r1
 8004448:	4601      	mov	r1, r0
 800444a:	4802      	ldr	r0, [pc, #8]	; (8004454 <vsiprintf+0x10>)
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f7ff bfe3 	b.w	8004418 <_vsiprintf_r>
 8004452:	bf00      	nop
 8004454:	20000014 	.word	0x20000014

08004458 <__ssputs_r>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	688e      	ldr	r6, [r1, #8]
 800445e:	429e      	cmp	r6, r3
 8004460:	4682      	mov	sl, r0
 8004462:	460c      	mov	r4, r1
 8004464:	4690      	mov	r8, r2
 8004466:	461f      	mov	r7, r3
 8004468:	d838      	bhi.n	80044dc <__ssputs_r+0x84>
 800446a:	898a      	ldrh	r2, [r1, #12]
 800446c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004470:	d032      	beq.n	80044d8 <__ssputs_r+0x80>
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	6909      	ldr	r1, [r1, #16]
 8004476:	eba5 0901 	sub.w	r9, r5, r1
 800447a:	6965      	ldr	r5, [r4, #20]
 800447c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004484:	3301      	adds	r3, #1
 8004486:	444b      	add	r3, r9
 8004488:	106d      	asrs	r5, r5, #1
 800448a:	429d      	cmp	r5, r3
 800448c:	bf38      	it	cc
 800448e:	461d      	movcc	r5, r3
 8004490:	0553      	lsls	r3, r2, #21
 8004492:	d531      	bpl.n	80044f8 <__ssputs_r+0xa0>
 8004494:	4629      	mov	r1, r5
 8004496:	f000 fb47 	bl	8004b28 <_malloc_r>
 800449a:	4606      	mov	r6, r0
 800449c:	b950      	cbnz	r0, 80044b4 <__ssputs_r+0x5c>
 800449e:	230c      	movs	r3, #12
 80044a0:	f8ca 3000 	str.w	r3, [sl]
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	6921      	ldr	r1, [r4, #16]
 80044b6:	464a      	mov	r2, r9
 80044b8:	f000 fabe 	bl	8004a38 <memcpy>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	6126      	str	r6, [r4, #16]
 80044ca:	6165      	str	r5, [r4, #20]
 80044cc:	444e      	add	r6, r9
 80044ce:	eba5 0509 	sub.w	r5, r5, r9
 80044d2:	6026      	str	r6, [r4, #0]
 80044d4:	60a5      	str	r5, [r4, #8]
 80044d6:	463e      	mov	r6, r7
 80044d8:	42be      	cmp	r6, r7
 80044da:	d900      	bls.n	80044de <__ssputs_r+0x86>
 80044dc:	463e      	mov	r6, r7
 80044de:	4632      	mov	r2, r6
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	4641      	mov	r1, r8
 80044e4:	f000 fab6 	bl	8004a54 <memmove>
 80044e8:	68a3      	ldr	r3, [r4, #8]
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	1b9b      	subs	r3, r3, r6
 80044ee:	4432      	add	r2, r6
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	2000      	movs	r0, #0
 80044f6:	e7db      	b.n	80044b0 <__ssputs_r+0x58>
 80044f8:	462a      	mov	r2, r5
 80044fa:	f000 fb6f 	bl	8004bdc <_realloc_r>
 80044fe:	4606      	mov	r6, r0
 8004500:	2800      	cmp	r0, #0
 8004502:	d1e1      	bne.n	80044c8 <__ssputs_r+0x70>
 8004504:	6921      	ldr	r1, [r4, #16]
 8004506:	4650      	mov	r0, sl
 8004508:	f000 fabe 	bl	8004a88 <_free_r>
 800450c:	e7c7      	b.n	800449e <__ssputs_r+0x46>
	...

08004510 <_svfiprintf_r>:
 8004510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004514:	4698      	mov	r8, r3
 8004516:	898b      	ldrh	r3, [r1, #12]
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	b09d      	sub	sp, #116	; 0x74
 800451c:	4607      	mov	r7, r0
 800451e:	460d      	mov	r5, r1
 8004520:	4614      	mov	r4, r2
 8004522:	d50e      	bpl.n	8004542 <_svfiprintf_r+0x32>
 8004524:	690b      	ldr	r3, [r1, #16]
 8004526:	b963      	cbnz	r3, 8004542 <_svfiprintf_r+0x32>
 8004528:	2140      	movs	r1, #64	; 0x40
 800452a:	f000 fafd 	bl	8004b28 <_malloc_r>
 800452e:	6028      	str	r0, [r5, #0]
 8004530:	6128      	str	r0, [r5, #16]
 8004532:	b920      	cbnz	r0, 800453e <_svfiprintf_r+0x2e>
 8004534:	230c      	movs	r3, #12
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e0d1      	b.n	80046e2 <_svfiprintf_r+0x1d2>
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	616b      	str	r3, [r5, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	9309      	str	r3, [sp, #36]	; 0x24
 8004546:	2320      	movs	r3, #32
 8004548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800454c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004550:	2330      	movs	r3, #48	; 0x30
 8004552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046fc <_svfiprintf_r+0x1ec>
 8004556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800455a:	f04f 0901 	mov.w	r9, #1
 800455e:	4623      	mov	r3, r4
 8004560:	469a      	mov	sl, r3
 8004562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004566:	b10a      	cbz	r2, 800456c <_svfiprintf_r+0x5c>
 8004568:	2a25      	cmp	r2, #37	; 0x25
 800456a:	d1f9      	bne.n	8004560 <_svfiprintf_r+0x50>
 800456c:	ebba 0b04 	subs.w	fp, sl, r4
 8004570:	d00b      	beq.n	800458a <_svfiprintf_r+0x7a>
 8004572:	465b      	mov	r3, fp
 8004574:	4622      	mov	r2, r4
 8004576:	4629      	mov	r1, r5
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ff6d 	bl	8004458 <__ssputs_r>
 800457e:	3001      	adds	r0, #1
 8004580:	f000 80aa 	beq.w	80046d8 <_svfiprintf_r+0x1c8>
 8004584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004586:	445a      	add	r2, fp
 8004588:	9209      	str	r2, [sp, #36]	; 0x24
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a2 	beq.w	80046d8 <_svfiprintf_r+0x1c8>
 8004594:	2300      	movs	r3, #0
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800459e:	f10a 0a01 	add.w	sl, sl, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045aa:	931a      	str	r3, [sp, #104]	; 0x68
 80045ac:	4654      	mov	r4, sl
 80045ae:	2205      	movs	r2, #5
 80045b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b4:	4851      	ldr	r0, [pc, #324]	; (80046fc <_svfiprintf_r+0x1ec>)
 80045b6:	f7fb fe33 	bl	8000220 <memchr>
 80045ba:	9a04      	ldr	r2, [sp, #16]
 80045bc:	b9d8      	cbnz	r0, 80045f6 <_svfiprintf_r+0xe6>
 80045be:	06d0      	lsls	r0, r2, #27
 80045c0:	bf44      	itt	mi
 80045c2:	2320      	movmi	r3, #32
 80045c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c8:	0711      	lsls	r1, r2, #28
 80045ca:	bf44      	itt	mi
 80045cc:	232b      	movmi	r3, #43	; 0x2b
 80045ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b2a      	cmp	r3, #42	; 0x2a
 80045d8:	d015      	beq.n	8004606 <_svfiprintf_r+0xf6>
 80045da:	9a07      	ldr	r2, [sp, #28]
 80045dc:	4654      	mov	r4, sl
 80045de:	2000      	movs	r0, #0
 80045e0:	f04f 0c0a 	mov.w	ip, #10
 80045e4:	4621      	mov	r1, r4
 80045e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ea:	3b30      	subs	r3, #48	; 0x30
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d94e      	bls.n	800468e <_svfiprintf_r+0x17e>
 80045f0:	b1b0      	cbz	r0, 8004620 <_svfiprintf_r+0x110>
 80045f2:	9207      	str	r2, [sp, #28]
 80045f4:	e014      	b.n	8004620 <_svfiprintf_r+0x110>
 80045f6:	eba0 0308 	sub.w	r3, r0, r8
 80045fa:	fa09 f303 	lsl.w	r3, r9, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	46a2      	mov	sl, r4
 8004604:	e7d2      	b.n	80045ac <_svfiprintf_r+0x9c>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	1d19      	adds	r1, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9103      	str	r1, [sp, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfbb      	ittet	lt
 8004612:	425b      	neglt	r3, r3
 8004614:	f042 0202 	orrlt.w	r2, r2, #2
 8004618:	9307      	strge	r3, [sp, #28]
 800461a:	9307      	strlt	r3, [sp, #28]
 800461c:	bfb8      	it	lt
 800461e:	9204      	strlt	r2, [sp, #16]
 8004620:	7823      	ldrb	r3, [r4, #0]
 8004622:	2b2e      	cmp	r3, #46	; 0x2e
 8004624:	d10c      	bne.n	8004640 <_svfiprintf_r+0x130>
 8004626:	7863      	ldrb	r3, [r4, #1]
 8004628:	2b2a      	cmp	r3, #42	; 0x2a
 800462a:	d135      	bne.n	8004698 <_svfiprintf_r+0x188>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	9203      	str	r2, [sp, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	bfb8      	it	lt
 8004638:	f04f 33ff 	movlt.w	r3, #4294967295
 800463c:	3402      	adds	r4, #2
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800470c <_svfiprintf_r+0x1fc>
 8004644:	7821      	ldrb	r1, [r4, #0]
 8004646:	2203      	movs	r2, #3
 8004648:	4650      	mov	r0, sl
 800464a:	f7fb fde9 	bl	8000220 <memchr>
 800464e:	b140      	cbz	r0, 8004662 <_svfiprintf_r+0x152>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	eba0 000a 	sub.w	r0, r0, sl
 8004656:	fa03 f000 	lsl.w	r0, r3, r0
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	4303      	orrs	r3, r0
 800465e:	3401      	adds	r4, #1
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004666:	4826      	ldr	r0, [pc, #152]	; (8004700 <_svfiprintf_r+0x1f0>)
 8004668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800466c:	2206      	movs	r2, #6
 800466e:	f7fb fdd7 	bl	8000220 <memchr>
 8004672:	2800      	cmp	r0, #0
 8004674:	d038      	beq.n	80046e8 <_svfiprintf_r+0x1d8>
 8004676:	4b23      	ldr	r3, [pc, #140]	; (8004704 <_svfiprintf_r+0x1f4>)
 8004678:	bb1b      	cbnz	r3, 80046c2 <_svfiprintf_r+0x1b2>
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	3307      	adds	r3, #7
 800467e:	f023 0307 	bic.w	r3, r3, #7
 8004682:	3308      	adds	r3, #8
 8004684:	9303      	str	r3, [sp, #12]
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	4433      	add	r3, r6
 800468a:	9309      	str	r3, [sp, #36]	; 0x24
 800468c:	e767      	b.n	800455e <_svfiprintf_r+0x4e>
 800468e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004692:	460c      	mov	r4, r1
 8004694:	2001      	movs	r0, #1
 8004696:	e7a5      	b.n	80045e4 <_svfiprintf_r+0xd4>
 8004698:	2300      	movs	r3, #0
 800469a:	3401      	adds	r4, #1
 800469c:	9305      	str	r3, [sp, #20]
 800469e:	4619      	mov	r1, r3
 80046a0:	f04f 0c0a 	mov.w	ip, #10
 80046a4:	4620      	mov	r0, r4
 80046a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046aa:	3a30      	subs	r2, #48	; 0x30
 80046ac:	2a09      	cmp	r2, #9
 80046ae:	d903      	bls.n	80046b8 <_svfiprintf_r+0x1a8>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0c5      	beq.n	8004640 <_svfiprintf_r+0x130>
 80046b4:	9105      	str	r1, [sp, #20]
 80046b6:	e7c3      	b.n	8004640 <_svfiprintf_r+0x130>
 80046b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80046bc:	4604      	mov	r4, r0
 80046be:	2301      	movs	r3, #1
 80046c0:	e7f0      	b.n	80046a4 <_svfiprintf_r+0x194>
 80046c2:	ab03      	add	r3, sp, #12
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	462a      	mov	r2, r5
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <_svfiprintf_r+0x1f8>)
 80046ca:	a904      	add	r1, sp, #16
 80046cc:	4638      	mov	r0, r7
 80046ce:	f3af 8000 	nop.w
 80046d2:	1c42      	adds	r2, r0, #1
 80046d4:	4606      	mov	r6, r0
 80046d6:	d1d6      	bne.n	8004686 <_svfiprintf_r+0x176>
 80046d8:	89ab      	ldrh	r3, [r5, #12]
 80046da:	065b      	lsls	r3, r3, #25
 80046dc:	f53f af2c 	bmi.w	8004538 <_svfiprintf_r+0x28>
 80046e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e2:	b01d      	add	sp, #116	; 0x74
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <_svfiprintf_r+0x1f8>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4638      	mov	r0, r7
 80046f4:	f000 f87a 	bl	80047ec <_printf_i>
 80046f8:	e7eb      	b.n	80046d2 <_svfiprintf_r+0x1c2>
 80046fa:	bf00      	nop
 80046fc:	0800514c 	.word	0x0800514c
 8004700:	08005156 	.word	0x08005156
 8004704:	00000000 	.word	0x00000000
 8004708:	08004459 	.word	0x08004459
 800470c:	08005152 	.word	0x08005152

08004710 <_printf_common>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	4616      	mov	r6, r2
 8004716:	4699      	mov	r9, r3
 8004718:	688a      	ldr	r2, [r1, #8]
 800471a:	690b      	ldr	r3, [r1, #16]
 800471c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004720:	4293      	cmp	r3, r2
 8004722:	bfb8      	it	lt
 8004724:	4613      	movlt	r3, r2
 8004726:	6033      	str	r3, [r6, #0]
 8004728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800472c:	4607      	mov	r7, r0
 800472e:	460c      	mov	r4, r1
 8004730:	b10a      	cbz	r2, 8004736 <_printf_common+0x26>
 8004732:	3301      	adds	r3, #1
 8004734:	6033      	str	r3, [r6, #0]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	0699      	lsls	r1, r3, #26
 800473a:	bf42      	ittt	mi
 800473c:	6833      	ldrmi	r3, [r6, #0]
 800473e:	3302      	addmi	r3, #2
 8004740:	6033      	strmi	r3, [r6, #0]
 8004742:	6825      	ldr	r5, [r4, #0]
 8004744:	f015 0506 	ands.w	r5, r5, #6
 8004748:	d106      	bne.n	8004758 <_printf_common+0x48>
 800474a:	f104 0a19 	add.w	sl, r4, #25
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	6832      	ldr	r2, [r6, #0]
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	42ab      	cmp	r3, r5
 8004756:	dc26      	bgt.n	80047a6 <_printf_common+0x96>
 8004758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800475c:	1e13      	subs	r3, r2, #0
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	bf18      	it	ne
 8004762:	2301      	movne	r3, #1
 8004764:	0692      	lsls	r2, r2, #26
 8004766:	d42b      	bmi.n	80047c0 <_printf_common+0xb0>
 8004768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800476c:	4649      	mov	r1, r9
 800476e:	4638      	mov	r0, r7
 8004770:	47c0      	blx	r8
 8004772:	3001      	adds	r0, #1
 8004774:	d01e      	beq.n	80047b4 <_printf_common+0xa4>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	68e5      	ldr	r5, [r4, #12]
 800477a:	6832      	ldr	r2, [r6, #0]
 800477c:	f003 0306 	and.w	r3, r3, #6
 8004780:	2b04      	cmp	r3, #4
 8004782:	bf08      	it	eq
 8004784:	1aad      	subeq	r5, r5, r2
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	6922      	ldr	r2, [r4, #16]
 800478a:	bf0c      	ite	eq
 800478c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004790:	2500      	movne	r5, #0
 8004792:	4293      	cmp	r3, r2
 8004794:	bfc4      	itt	gt
 8004796:	1a9b      	subgt	r3, r3, r2
 8004798:	18ed      	addgt	r5, r5, r3
 800479a:	2600      	movs	r6, #0
 800479c:	341a      	adds	r4, #26
 800479e:	42b5      	cmp	r5, r6
 80047a0:	d11a      	bne.n	80047d8 <_printf_common+0xc8>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e008      	b.n	80047b8 <_printf_common+0xa8>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4652      	mov	r2, sl
 80047aa:	4649      	mov	r1, r9
 80047ac:	4638      	mov	r0, r7
 80047ae:	47c0      	blx	r8
 80047b0:	3001      	adds	r0, #1
 80047b2:	d103      	bne.n	80047bc <_printf_common+0xac>
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	3501      	adds	r5, #1
 80047be:	e7c6      	b.n	800474e <_printf_common+0x3e>
 80047c0:	18e1      	adds	r1, r4, r3
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	2030      	movs	r0, #48	; 0x30
 80047c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ca:	4422      	add	r2, r4
 80047cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047d4:	3302      	adds	r3, #2
 80047d6:	e7c7      	b.n	8004768 <_printf_common+0x58>
 80047d8:	2301      	movs	r3, #1
 80047da:	4622      	mov	r2, r4
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0e6      	beq.n	80047b4 <_printf_common+0xa4>
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7d9      	b.n	800479e <_printf_common+0x8e>
	...

080047ec <_printf_i>:
 80047ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	460c      	mov	r4, r1
 80047f2:	4691      	mov	r9, r2
 80047f4:	7e27      	ldrb	r7, [r4, #24]
 80047f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047f8:	2f78      	cmp	r7, #120	; 0x78
 80047fa:	4680      	mov	r8, r0
 80047fc:	469a      	mov	sl, r3
 80047fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004802:	d807      	bhi.n	8004814 <_printf_i+0x28>
 8004804:	2f62      	cmp	r7, #98	; 0x62
 8004806:	d80a      	bhi.n	800481e <_printf_i+0x32>
 8004808:	2f00      	cmp	r7, #0
 800480a:	f000 80d8 	beq.w	80049be <_printf_i+0x1d2>
 800480e:	2f58      	cmp	r7, #88	; 0x58
 8004810:	f000 80a3 	beq.w	800495a <_printf_i+0x16e>
 8004814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800481c:	e03a      	b.n	8004894 <_printf_i+0xa8>
 800481e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004822:	2b15      	cmp	r3, #21
 8004824:	d8f6      	bhi.n	8004814 <_printf_i+0x28>
 8004826:	a001      	add	r0, pc, #4	; (adr r0, 800482c <_printf_i+0x40>)
 8004828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800482c:	08004885 	.word	0x08004885
 8004830:	08004899 	.word	0x08004899
 8004834:	08004815 	.word	0x08004815
 8004838:	08004815 	.word	0x08004815
 800483c:	08004815 	.word	0x08004815
 8004840:	08004815 	.word	0x08004815
 8004844:	08004899 	.word	0x08004899
 8004848:	08004815 	.word	0x08004815
 800484c:	08004815 	.word	0x08004815
 8004850:	08004815 	.word	0x08004815
 8004854:	08004815 	.word	0x08004815
 8004858:	080049a5 	.word	0x080049a5
 800485c:	080048c9 	.word	0x080048c9
 8004860:	08004987 	.word	0x08004987
 8004864:	08004815 	.word	0x08004815
 8004868:	08004815 	.word	0x08004815
 800486c:	080049c7 	.word	0x080049c7
 8004870:	08004815 	.word	0x08004815
 8004874:	080048c9 	.word	0x080048c9
 8004878:	08004815 	.word	0x08004815
 800487c:	08004815 	.word	0x08004815
 8004880:	0800498f 	.word	0x0800498f
 8004884:	680b      	ldr	r3, [r1, #0]
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	600a      	str	r2, [r1, #0]
 800488c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004894:	2301      	movs	r3, #1
 8004896:	e0a3      	b.n	80049e0 <_printf_i+0x1f4>
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	6808      	ldr	r0, [r1, #0]
 800489c:	062e      	lsls	r6, r5, #24
 800489e:	f100 0304 	add.w	r3, r0, #4
 80048a2:	d50a      	bpl.n	80048ba <_printf_i+0xce>
 80048a4:	6805      	ldr	r5, [r0, #0]
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	da03      	bge.n	80048b4 <_printf_i+0xc8>
 80048ac:	232d      	movs	r3, #45	; 0x2d
 80048ae:	426d      	negs	r5, r5
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b4:	485e      	ldr	r0, [pc, #376]	; (8004a30 <_printf_i+0x244>)
 80048b6:	230a      	movs	r3, #10
 80048b8:	e019      	b.n	80048ee <_printf_i+0x102>
 80048ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048be:	6805      	ldr	r5, [r0, #0]
 80048c0:	600b      	str	r3, [r1, #0]
 80048c2:	bf18      	it	ne
 80048c4:	b22d      	sxthne	r5, r5
 80048c6:	e7ef      	b.n	80048a8 <_printf_i+0xbc>
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	1d18      	adds	r0, r3, #4
 80048ce:	6008      	str	r0, [r1, #0]
 80048d0:	0628      	lsls	r0, r5, #24
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0xec>
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0xf2>
 80048d8:	0669      	lsls	r1, r5, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0xe8>
 80048dc:	881d      	ldrh	r5, [r3, #0]
 80048de:	4854      	ldr	r0, [pc, #336]	; (8004a30 <_printf_i+0x244>)
 80048e0:	2f6f      	cmp	r7, #111	; 0x6f
 80048e2:	bf0c      	ite	eq
 80048e4:	2308      	moveq	r3, #8
 80048e6:	230a      	movne	r3, #10
 80048e8:	2100      	movs	r1, #0
 80048ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ee:	6866      	ldr	r6, [r4, #4]
 80048f0:	60a6      	str	r6, [r4, #8]
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	bfa2      	ittt	ge
 80048f6:	6821      	ldrge	r1, [r4, #0]
 80048f8:	f021 0104 	bicge.w	r1, r1, #4
 80048fc:	6021      	strge	r1, [r4, #0]
 80048fe:	b90d      	cbnz	r5, 8004904 <_printf_i+0x118>
 8004900:	2e00      	cmp	r6, #0
 8004902:	d04d      	beq.n	80049a0 <_printf_i+0x1b4>
 8004904:	4616      	mov	r6, r2
 8004906:	fbb5 f1f3 	udiv	r1, r5, r3
 800490a:	fb03 5711 	mls	r7, r3, r1, r5
 800490e:	5dc7      	ldrb	r7, [r0, r7]
 8004910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004914:	462f      	mov	r7, r5
 8004916:	42bb      	cmp	r3, r7
 8004918:	460d      	mov	r5, r1
 800491a:	d9f4      	bls.n	8004906 <_printf_i+0x11a>
 800491c:	2b08      	cmp	r3, #8
 800491e:	d10b      	bne.n	8004938 <_printf_i+0x14c>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	07df      	lsls	r7, r3, #31
 8004924:	d508      	bpl.n	8004938 <_printf_i+0x14c>
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	6861      	ldr	r1, [r4, #4]
 800492a:	4299      	cmp	r1, r3
 800492c:	bfde      	ittt	le
 800492e:	2330      	movle	r3, #48	; 0x30
 8004930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004938:	1b92      	subs	r2, r2, r6
 800493a:	6122      	str	r2, [r4, #16]
 800493c:	f8cd a000 	str.w	sl, [sp]
 8004940:	464b      	mov	r3, r9
 8004942:	aa03      	add	r2, sp, #12
 8004944:	4621      	mov	r1, r4
 8004946:	4640      	mov	r0, r8
 8004948:	f7ff fee2 	bl	8004710 <_printf_common>
 800494c:	3001      	adds	r0, #1
 800494e:	d14c      	bne.n	80049ea <_printf_i+0x1fe>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	b004      	add	sp, #16
 8004956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495a:	4835      	ldr	r0, [pc, #212]	; (8004a30 <_printf_i+0x244>)
 800495c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	680e      	ldr	r6, [r1, #0]
 8004964:	061f      	lsls	r7, r3, #24
 8004966:	f856 5b04 	ldr.w	r5, [r6], #4
 800496a:	600e      	str	r6, [r1, #0]
 800496c:	d514      	bpl.n	8004998 <_printf_i+0x1ac>
 800496e:	07d9      	lsls	r1, r3, #31
 8004970:	bf44      	itt	mi
 8004972:	f043 0320 	orrmi.w	r3, r3, #32
 8004976:	6023      	strmi	r3, [r4, #0]
 8004978:	b91d      	cbnz	r5, 8004982 <_printf_i+0x196>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f023 0320 	bic.w	r3, r3, #32
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	2310      	movs	r3, #16
 8004984:	e7b0      	b.n	80048e8 <_printf_i+0xfc>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	f043 0320 	orr.w	r3, r3, #32
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	2378      	movs	r3, #120	; 0x78
 8004990:	4828      	ldr	r0, [pc, #160]	; (8004a34 <_printf_i+0x248>)
 8004992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004996:	e7e3      	b.n	8004960 <_printf_i+0x174>
 8004998:	065e      	lsls	r6, r3, #25
 800499a:	bf48      	it	mi
 800499c:	b2ad      	uxthmi	r5, r5
 800499e:	e7e6      	b.n	800496e <_printf_i+0x182>
 80049a0:	4616      	mov	r6, r2
 80049a2:	e7bb      	b.n	800491c <_printf_i+0x130>
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	6826      	ldr	r6, [r4, #0]
 80049a8:	6960      	ldr	r0, [r4, #20]
 80049aa:	1d1d      	adds	r5, r3, #4
 80049ac:	600d      	str	r5, [r1, #0]
 80049ae:	0635      	lsls	r5, r6, #24
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0x1cc>
 80049b4:	6018      	str	r0, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0x1d2>
 80049b8:	0671      	lsls	r1, r6, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0x1c8>
 80049bc:	8018      	strh	r0, [r3, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	6123      	str	r3, [r4, #16]
 80049c2:	4616      	mov	r6, r2
 80049c4:	e7ba      	b.n	800493c <_printf_i+0x150>
 80049c6:	680b      	ldr	r3, [r1, #0]
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	600a      	str	r2, [r1, #0]
 80049cc:	681e      	ldr	r6, [r3, #0]
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	2100      	movs	r1, #0
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7fb fc24 	bl	8000220 <memchr>
 80049d8:	b108      	cbz	r0, 80049de <_printf_i+0x1f2>
 80049da:	1b80      	subs	r0, r0, r6
 80049dc:	6060      	str	r0, [r4, #4]
 80049de:	6863      	ldr	r3, [r4, #4]
 80049e0:	6123      	str	r3, [r4, #16]
 80049e2:	2300      	movs	r3, #0
 80049e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e8:	e7a8      	b.n	800493c <_printf_i+0x150>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	4632      	mov	r2, r6
 80049ee:	4649      	mov	r1, r9
 80049f0:	4640      	mov	r0, r8
 80049f2:	47d0      	blx	sl
 80049f4:	3001      	adds	r0, #1
 80049f6:	d0ab      	beq.n	8004950 <_printf_i+0x164>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	079b      	lsls	r3, r3, #30
 80049fc:	d413      	bmi.n	8004a26 <_printf_i+0x23a>
 80049fe:	68e0      	ldr	r0, [r4, #12]
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	4298      	cmp	r0, r3
 8004a04:	bfb8      	it	lt
 8004a06:	4618      	movlt	r0, r3
 8004a08:	e7a4      	b.n	8004954 <_printf_i+0x168>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4640      	mov	r0, r8
 8004a12:	47d0      	blx	sl
 8004a14:	3001      	adds	r0, #1
 8004a16:	d09b      	beq.n	8004950 <_printf_i+0x164>
 8004a18:	3501      	adds	r5, #1
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	9903      	ldr	r1, [sp, #12]
 8004a1e:	1a5b      	subs	r3, r3, r1
 8004a20:	42ab      	cmp	r3, r5
 8004a22:	dcf2      	bgt.n	8004a0a <_printf_i+0x21e>
 8004a24:	e7eb      	b.n	80049fe <_printf_i+0x212>
 8004a26:	2500      	movs	r5, #0
 8004a28:	f104 0619 	add.w	r6, r4, #25
 8004a2c:	e7f5      	b.n	8004a1a <_printf_i+0x22e>
 8004a2e:	bf00      	nop
 8004a30:	0800515d 	.word	0x0800515d
 8004a34:	0800516e 	.word	0x0800516e

08004a38 <memcpy>:
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	4770      	bx	lr
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4e:	4291      	cmp	r1, r2
 8004a50:	d1f9      	bne.n	8004a46 <memcpy+0xe>
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <memmove>:
 8004a54:	4288      	cmp	r0, r1
 8004a56:	b510      	push	{r4, lr}
 8004a58:	eb01 0402 	add.w	r4, r1, r2
 8004a5c:	d902      	bls.n	8004a64 <memmove+0x10>
 8004a5e:	4284      	cmp	r4, r0
 8004a60:	4623      	mov	r3, r4
 8004a62:	d807      	bhi.n	8004a74 <memmove+0x20>
 8004a64:	1e43      	subs	r3, r0, #1
 8004a66:	42a1      	cmp	r1, r4
 8004a68:	d008      	beq.n	8004a7c <memmove+0x28>
 8004a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a72:	e7f8      	b.n	8004a66 <memmove+0x12>
 8004a74:	4402      	add	r2, r0
 8004a76:	4601      	mov	r1, r0
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d100      	bne.n	8004a7e <memmove+0x2a>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a86:	e7f7      	b.n	8004a78 <memmove+0x24>

08004a88 <_free_r>:
 8004a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d048      	beq.n	8004b20 <_free_r+0x98>
 8004a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a92:	9001      	str	r0, [sp, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f1a1 0404 	sub.w	r4, r1, #4
 8004a9a:	bfb8      	it	lt
 8004a9c:	18e4      	addlt	r4, r4, r3
 8004a9e:	f000 f8d3 	bl	8004c48 <__malloc_lock>
 8004aa2:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <_free_r+0x9c>)
 8004aa4:	9801      	ldr	r0, [sp, #4]
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	b933      	cbnz	r3, 8004aba <_free_r+0x32>
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	6014      	str	r4, [r2, #0]
 8004ab0:	b003      	add	sp, #12
 8004ab2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab6:	f000 b8cd 	b.w	8004c54 <__malloc_unlock>
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	d90b      	bls.n	8004ad6 <_free_r+0x4e>
 8004abe:	6821      	ldr	r1, [r4, #0]
 8004ac0:	1862      	adds	r2, r4, r1
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bf04      	itt	eq
 8004ac6:	681a      	ldreq	r2, [r3, #0]
 8004ac8:	685b      	ldreq	r3, [r3, #4]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	bf04      	itt	eq
 8004ace:	1852      	addeq	r2, r2, r1
 8004ad0:	6022      	streq	r2, [r4, #0]
 8004ad2:	602c      	str	r4, [r5, #0]
 8004ad4:	e7ec      	b.n	8004ab0 <_free_r+0x28>
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b10b      	cbz	r3, 8004ae0 <_free_r+0x58>
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d9fa      	bls.n	8004ad6 <_free_r+0x4e>
 8004ae0:	6811      	ldr	r1, [r2, #0]
 8004ae2:	1855      	adds	r5, r2, r1
 8004ae4:	42a5      	cmp	r5, r4
 8004ae6:	d10b      	bne.n	8004b00 <_free_r+0x78>
 8004ae8:	6824      	ldr	r4, [r4, #0]
 8004aea:	4421      	add	r1, r4
 8004aec:	1854      	adds	r4, r2, r1
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	d1dd      	bne.n	8004ab0 <_free_r+0x28>
 8004af4:	681c      	ldr	r4, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	6053      	str	r3, [r2, #4]
 8004afa:	4421      	add	r1, r4
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	e7d7      	b.n	8004ab0 <_free_r+0x28>
 8004b00:	d902      	bls.n	8004b08 <_free_r+0x80>
 8004b02:	230c      	movs	r3, #12
 8004b04:	6003      	str	r3, [r0, #0]
 8004b06:	e7d3      	b.n	8004ab0 <_free_r+0x28>
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1961      	adds	r1, r4, r5
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	bf04      	itt	eq
 8004b10:	6819      	ldreq	r1, [r3, #0]
 8004b12:	685b      	ldreq	r3, [r3, #4]
 8004b14:	6063      	str	r3, [r4, #4]
 8004b16:	bf04      	itt	eq
 8004b18:	1949      	addeq	r1, r1, r5
 8004b1a:	6021      	streq	r1, [r4, #0]
 8004b1c:	6054      	str	r4, [r2, #4]
 8004b1e:	e7c7      	b.n	8004ab0 <_free_r+0x28>
 8004b20:	b003      	add	sp, #12
 8004b22:	bd30      	pop	{r4, r5, pc}
 8004b24:	20000098 	.word	0x20000098

08004b28 <_malloc_r>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	1ccd      	adds	r5, r1, #3
 8004b2c:	f025 0503 	bic.w	r5, r5, #3
 8004b30:	3508      	adds	r5, #8
 8004b32:	2d0c      	cmp	r5, #12
 8004b34:	bf38      	it	cc
 8004b36:	250c      	movcc	r5, #12
 8004b38:	2d00      	cmp	r5, #0
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	db01      	blt.n	8004b42 <_malloc_r+0x1a>
 8004b3e:	42a9      	cmp	r1, r5
 8004b40:	d903      	bls.n	8004b4a <_malloc_r+0x22>
 8004b42:	230c      	movs	r3, #12
 8004b44:	6033      	str	r3, [r6, #0]
 8004b46:	2000      	movs	r0, #0
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4a:	f000 f87d 	bl	8004c48 <__malloc_lock>
 8004b4e:	4921      	ldr	r1, [pc, #132]	; (8004bd4 <_malloc_r+0xac>)
 8004b50:	680a      	ldr	r2, [r1, #0]
 8004b52:	4614      	mov	r4, r2
 8004b54:	b99c      	cbnz	r4, 8004b7e <_malloc_r+0x56>
 8004b56:	4f20      	ldr	r7, [pc, #128]	; (8004bd8 <_malloc_r+0xb0>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b923      	cbnz	r3, 8004b66 <_malloc_r+0x3e>
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f000 f862 	bl	8004c28 <_sbrk_r>
 8004b64:	6038      	str	r0, [r7, #0]
 8004b66:	4629      	mov	r1, r5
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f85d 	bl	8004c28 <_sbrk_r>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	d123      	bne.n	8004bba <_malloc_r+0x92>
 8004b72:	230c      	movs	r3, #12
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	4630      	mov	r0, r6
 8004b78:	f000 f86c 	bl	8004c54 <__malloc_unlock>
 8004b7c:	e7e3      	b.n	8004b46 <_malloc_r+0x1e>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	1b5b      	subs	r3, r3, r5
 8004b82:	d417      	bmi.n	8004bb4 <_malloc_r+0x8c>
 8004b84:	2b0b      	cmp	r3, #11
 8004b86:	d903      	bls.n	8004b90 <_malloc_r+0x68>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	441c      	add	r4, r3
 8004b8c:	6025      	str	r5, [r4, #0]
 8004b8e:	e004      	b.n	8004b9a <_malloc_r+0x72>
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	42a2      	cmp	r2, r4
 8004b94:	bf0c      	ite	eq
 8004b96:	600b      	streq	r3, [r1, #0]
 8004b98:	6053      	strne	r3, [r2, #4]
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f000 f85a 	bl	8004c54 <__malloc_unlock>
 8004ba0:	f104 000b 	add.w	r0, r4, #11
 8004ba4:	1d23      	adds	r3, r4, #4
 8004ba6:	f020 0007 	bic.w	r0, r0, #7
 8004baa:	1ac2      	subs	r2, r0, r3
 8004bac:	d0cc      	beq.n	8004b48 <_malloc_r+0x20>
 8004bae:	1a1b      	subs	r3, r3, r0
 8004bb0:	50a3      	str	r3, [r4, r2]
 8004bb2:	e7c9      	b.n	8004b48 <_malloc_r+0x20>
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	6864      	ldr	r4, [r4, #4]
 8004bb8:	e7cc      	b.n	8004b54 <_malloc_r+0x2c>
 8004bba:	1cc4      	adds	r4, r0, #3
 8004bbc:	f024 0403 	bic.w	r4, r4, #3
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d0e3      	beq.n	8004b8c <_malloc_r+0x64>
 8004bc4:	1a21      	subs	r1, r4, r0
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 f82e 	bl	8004c28 <_sbrk_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d1dd      	bne.n	8004b8c <_malloc_r+0x64>
 8004bd0:	e7cf      	b.n	8004b72 <_malloc_r+0x4a>
 8004bd2:	bf00      	nop
 8004bd4:	20000098 	.word	0x20000098
 8004bd8:	2000009c 	.word	0x2000009c

08004bdc <_realloc_r>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4607      	mov	r7, r0
 8004be0:	4614      	mov	r4, r2
 8004be2:	460e      	mov	r6, r1
 8004be4:	b921      	cbnz	r1, 8004bf0 <_realloc_r+0x14>
 8004be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bea:	4611      	mov	r1, r2
 8004bec:	f7ff bf9c 	b.w	8004b28 <_malloc_r>
 8004bf0:	b922      	cbnz	r2, 8004bfc <_realloc_r+0x20>
 8004bf2:	f7ff ff49 	bl	8004a88 <_free_r>
 8004bf6:	4625      	mov	r5, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	f000 f830 	bl	8004c60 <_malloc_usable_size_r>
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d20f      	bcs.n	8004c24 <_realloc_r+0x48>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff ff8e 	bl	8004b28 <_malloc_r>
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0f2      	beq.n	8004bf8 <_realloc_r+0x1c>
 8004c12:	4631      	mov	r1, r6
 8004c14:	4622      	mov	r2, r4
 8004c16:	f7ff ff0f 	bl	8004a38 <memcpy>
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff ff33 	bl	8004a88 <_free_r>
 8004c22:	e7e9      	b.n	8004bf8 <_realloc_r+0x1c>
 8004c24:	4635      	mov	r5, r6
 8004c26:	e7e7      	b.n	8004bf8 <_realloc_r+0x1c>

08004c28 <_sbrk_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d06      	ldr	r5, [pc, #24]	; (8004c44 <_sbrk_r+0x1c>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fc fe58 	bl	80018e8 <_sbrk>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_sbrk_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_sbrk_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	2000021c 	.word	0x2000021c

08004c48 <__malloc_lock>:
 8004c48:	4801      	ldr	r0, [pc, #4]	; (8004c50 <__malloc_lock+0x8>)
 8004c4a:	f000 b811 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20000224 	.word	0x20000224

08004c54 <__malloc_unlock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	; (8004c5c <__malloc_unlock+0x8>)
 8004c56:	f000 b80c 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000224 	.word	0x20000224

08004c60 <_malloc_usable_size_r>:
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f18      	subs	r0, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfbc      	itt	lt
 8004c6a:	580b      	ldrlt	r3, [r1, r0]
 8004c6c:	18c0      	addlt	r0, r0, r3
 8004c6e:	4770      	bx	lr

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
